
CREATE TABLE [Account]
( 
	[AccountName]        varchar(30)  NOT NULL ,
	[AccountName2]       varchar(30)  NOT NULL ,
	[LocationAddress1]   varchar(30)  NOT NULL ,
	[LocationAddress2]   varchar(30)  NOT NULL ,
	[LocationCity]       varchar(30)  NOT NULL ,
	[LocationState]      varchar(30)  NOT NULL ,
	[LocationZip]        varchar(30)  NOT NULL ,
	[CompanyCode]        varchar(30)  NOT NULL ,
	[TaxIDNumber]        varchar(30)  NULL ,
	[NumberOfEmployees]  varchar(30)  NULL ,
	[NumberOfEmployessDate] datetime  NULL ,
	[ActivityStatus]     varchar(30)  NULL ,
	[ActivityStatusDate] datetime  NULL ,
	[GroupNumber]        integer  NULL ,
	[AccountEstablishedDate] datetime  NULL ,
	[PlanYearStartDate]  datetime  NULL ,
	[PlanYearEndDate]    datetime  NULL ,
	[SubsequentYearStartDate] datetime  NULL ,
	[IndustryDescription] varchar(30)  NULL ,
	[DualCompanyFlag]    varchar(30)  NULL ,
	[ComplexAccountFlag] varchar(30)  NULL ,
	[StandardIndustryCode] varchar(30)  NULL ,
	[AnnualizedPremuim]  integer  NULL ,
	[NoOuststandingInvoices] integer  NULL ,
	[NoMonthsInactive]   integer  NULL ,
	[LastInvoicePaidDate] datetime  NULL ,
	[LastInvoicePaidDueDate] datetime  NULL ,
	[LastInvoiceGenDate] datetime  NULL ,
	[NextInvoiceGenDate] datetime  NULL ,
	[LastServiceCallDate] datetime  NULL ,
	[LastBillCount]      integer  NULL ,
	[DisabilityOfferingStartDate] datetime  NULL ,
	[LocationPhone]      varchar(30)  NULL ,
	[AddressInformationSource] varchar(30)  NULL ,
	[WebAddress]         varchar(30)  NULL ,
	[SpecialHandlingCode] varchar(30)  NULL ,
	[MultiLocationAccountFlag] varchar(30)  NULL ,
	[PEOFlag]            varchar(30)  NULL ,
	[DisabilityOfferingTaxStatus] varchar(30)  NULL ,
	[TransitOneFlag]     varchar(30)  NULL ,
	[HSAFlag]            varchar(30)  NULL ,
	[HRAFlag]            varchar(30)  NULL ,
	[DataConfidenceLevel] varchar(30)  NULL ,
	[TotalPolicyCount]   integer  NULL ,
	[PendingAnnualizedPremium] integer  NULL ,
	[PercentByLineOfBusiness] integer  NULL ,
	[ScheduledLapseDate] datetime  NULL ,
	[PenetrationPercentage] integer  NULL ,
	[NoFSAParticipants]  integer  NULL 
)
go

CREATE TABLE [Account_Associate]
( 
	[SitCode]            varchar(30)  NOT NULL ,
	[CompanyCode]        varchar(30)  NOT NULL ,
	[WritingNumber]      integer  NOT NULL ,
	[ContractLevel]      varchar(30)  NOT NULL ,
	[IssueDate]          datetime  NOT NULL ,
	[AccountName]        varchar(30)  NOT NULL ,
	[AccountName2]       varchar(30)  NOT NULL ,
	[LocationAddress1]   varchar(30)  NOT NULL ,
	[LocationAddress2]   varchar(30)  NOT NULL ,
	[LocationCity]       varchar(30)  NOT NULL ,
	[LocationState]      varchar(30)  NOT NULL ,
	[LocationZip]        varchar(30)  NOT NULL ,
	[StartDate]          datetime  NULL ,
	[AssociateRole]      varchar(30)  NULL ,
	[StopDate]           datetime  NULL 
)
go

CREATE TABLE [Account_BillingAccount]
( 
	[AccountName]        varchar(30)  NOT NULL ,
	[AccountName2]       varchar(30)  NOT NULL ,
	[LocationAddress1]   varchar(30)  NOT NULL ,
	[LocationAddress2]   varchar(30)  NOT NULL ,
	[LocationCity]       varchar(30)  NOT NULL ,
	[LocationState]      varchar(30)  NOT NULL ,
	[LocationZip]        varchar(30)  NOT NULL ,
	[CompanyCode]        varchar(30)  NOT NULL ,
	[BAcctName]          varchar(30)  NOT NULL ,
	[BAcctName2]         varchar(30)  NOT NULL ,
	[BillingAddress1]    varchar(30)  NOT NULL ,
	[BillingAddress2]    varchar(30)  NOT NULL ,
	[BillingCity]        varchar(30)  NOT NULL ,
	[BillingState]       varchar(30)  NOT NULL ,
	[BillingZip]         varchar(30)  NOT NULL ,
	[RelationshipType]   varchar(30)  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[BillingFrequency]   varchar(30)  NULL ,
	[NonBillableMonths]  varchar(30)  NULL ,
	[EnrollmentPeriodLength] varchar(30)  NULL ,
	[FSAClaimsReimbursementMethod] varchar(30)  NULL ,
	[FSAPlanType]        varchar(30)  NULL ,
	[FSA_URMCap]         varchar(30)  NULL ,
	[SpecificationCode]  varchar(30)  NULL ,
	[AccountType]        varchar(30)  NULL ,
	[RCodeAccountFlag]   varchar(30)  NULL ,
	[RCodeAssocFlag]     varchar(30)  NULL ,
	[RCodeCustomerFlag]  varchar(30)  NULL ,
	[PaymentCardFlag]    varchar(30)  NULL ,
	[DepartmentCode]     varchar(30)  NULL ,
	[FICAExemptionFlag]  varchar(30)  NULL ,
	[RailroadTaxExemptionFlag] varchar(30)  NULL ,
	[ContributionPercentage] varchar(30)  NULL ,
	[HighDeductibleMedicalPaymentPlanFlag] varchar(30)  NULL ,
	[MedicalHealthInsuranceFlag] varchar(30)  NULL ,
	[SinglePointBillingFlag] varchar(30)  NULL ,
	[ExpressReconciliationFlag] varchar(30)  NULL ,
	[FSAServiceFee]      varchar(30)  NULL ,
	[GracePeriodLength]  varchar(30)  NULL 
)
go

CREATE TABLE [Account_ProductPlan]
( 
	[AccountName]        varchar(30)  NOT NULL ,
	[AccountName2]       varchar(30)  NOT NULL ,
	[LocationAddress1]   varchar(30)  NOT NULL ,
	[LocationAddress2]   varchar(30)  NOT NULL ,
	[LocationCity]       varchar(30)  NOT NULL ,
	[LocationState]      varchar(30)  NOT NULL ,
	[LocationZip]        varchar(30)  NOT NULL ,
	[CompanyCode]        varchar(30)  NOT NULL ,
	[LineOfBusiness]     varchar(30)  NOT NULL ,
	[SeriesName]         varchar(30)  NOT NULL ,
	[PlanName]           varchar(30)  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NULL 
)
go

CREATE TABLE [AccountMember]
( 
	[CustLastName]       varchar(30)  NOT NULL ,
	[CustFirstName]      varchar(30)  NOT NULL ,
	[CustMiddleInitial]  varchar(30)  NOT NULL ,
	[CustSuffix]         varchar(30)  NOT NULL ,
	[CustDOB]            datetime  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[AccountName]        varchar(30)  NOT NULL ,
	[AccountName2]       varchar(30)  NOT NULL ,
	[LocationAddress1]   varchar(30)  NOT NULL ,
	[LocationAddress2]   varchar(30)  NOT NULL ,
	[LocationCity]       varchar(30)  NOT NULL ,
	[LocationState]      varchar(30)  NOT NULL ,
	[LocationZip]        varchar(30)  NOT NULL ,
	[CompanyCode]        varchar(30)  NOT NULL ,
	[FSAContributionAmount] integer  NULL ,
	[CustBAcctDepartmentName] varchar(30)  NULL ,
	[EndDate]            datetime  NULL 
)
go

CREATE TABLE [Associate]
( 
	[AssocLastName]      varchar(30)  NOT NULL ,
	[AssocFirstName]     varchar(30)  NOT NULL ,
	[AssocMiddleInitial] varchar(30)  NOT NULL ,
	[AssocSuffix]        varchar(30)  NOT NULL ,
	[AssocDOB]           datetime  NOT NULL ,
	[TenureDate]         datetime  NULL ,
	[PhoneNumber]        varchar(30)  NULL 
)
go

CREATE TABLE [BenefitPremiumPredictionModel]
( 
	[DataURL]            varchar(200)  NULL ,
	[ModelScriptURL]     varchar(200)  NULL ,
	[BenefitName]        varchar(30)  NOT NULL ,
	[ExpectedExpenditure] float  NULL ,
	[SavedModelURL]      varchar(200)  NULL 
)
go

CREATE TABLE [BillingAccount]
( 
	[BAcctName]          varchar(30)  NOT NULL ,
	[BAcctName2]         varchar(30)  NOT NULL ,
	[BillingAddress1]    varchar(30)  NOT NULL ,
	[BillingAddress2]    varchar(30)  NOT NULL ,
	[BillingCity]        varchar(30)  NOT NULL ,
	[BillingState]       varchar(30)  NOT NULL ,
	[BillingZip]         varchar(30)  NOT NULL ,
	[GroupNumber]        integer  NULL ,
	[TaxIDNumber]        varchar(30)  NULL ,
	[OnlineBillingFlag]  varchar(30)  NULL ,
	[ActivityStatus]     varchar(30)  NULL ,
	[ActivityStatusDate] datetime  NULL ,
	[WebAddress]         varchar(30)  NULL ,
	[PayrollProcessorFlag] varchar(30)  NULL ,
	[BillingPhone]       varchar(30)  NULL ,
	[BillingAcctTypeDate] datetime  NULL ,
	[SpecialHandlingCode] varchar(30)  NULL ,
	[ChangeFilesFlag]    varchar(30)  NULL ,
	[EnrollmentFileFlag] varchar(30)  NULL ,
	[DebitCardFlag]      varchar(30)  NULL ,
	[BillingFileFlag]    varchar(30)  NULL ,
	[FTPSite]            varchar(30)  NULL ,
	[NextVisitDate]      datetime  NULL 
)
go

CREATE TABLE [Claim]
( 
	[ClaimNumber]        integer  NOT NULL ,
	[ClaimDate]          datetime  NULL ,
	[SettlementDate]     datetime  NULL ,
	[WellnessEligibilityDate] datetime  NULL ,
	[ContractNumber]     varchar(30)  NOT NULL ,
	[LineOfBusiness]     varchar(30)  NOT NULL ,
	[SeriesName]         varchar(30)  NOT NULL ,
	[PlanName]           varchar(30)  NOT NULL ,
	[ClaimNote]          varchar(30)  NULL ,
	[CustLastName]       varchar(30)  NOT NULL ,
	[CustFirstName]      varchar(30)  NOT NULL ,
	[CustMiddleInitial]  varchar(30)  NOT NULL ,
	[CustSuffix]         varchar(30)  NOT NULL ,
	[CustDOB]            datetime  NOT NULL 
)
go

CREATE TABLE [ClaimEvent]
( 
	[FIName]             varchar(30)  NOT NULL ,
	[FIAddress1]         varchar(30)  NOT NULL ,
	[FIAddress2]         varchar(30)  NOT NULL ,
	[FINCity]            varchar(30)  NOT NULL ,
	[FINState]           varchar(30)  NOT NULL ,
	[FINZip]             varchar(30)  NOT NULL ,
	[FIPhone]            varchar(30)  NOT NULL ,
	[ClaimNumber]        integer  NOT NULL ,
	[ContractNumber]     varchar(30)  NOT NULL ,
	[LineOfBusiness]     varchar(30)  NOT NULL ,
	[SeriesName]         varchar(30)  NOT NULL ,
	[PlanName]           varchar(30)  NOT NULL ,
	[CustLastName]       varchar(30)  NOT NULL ,
	[CustFirstName]      varchar(30)  NOT NULL ,
	[CustMiddleInitial]  varchar(30)  NOT NULL ,
	[CustSuffix]         varchar(30)  NOT NULL ,
	[CustDOB]            datetime  NOT NULL 
)
go

CREATE TABLE [ClaimImage]
( 
	[ClaimNumber]        integer  NOT NULL ,
	[DocumentId]         integer  NOT NULL ,
	[DocumentClass]      varchar(30)  NULL ,
	[ImageType]          varchar(30)  NULL ,
	[DateReceived]       datetime  NULL ,
	[ProcessedDate]      datetime  NULL ,
	[ContractNumber]     varchar(30)  NOT NULL ,
	[LineOfBusiness]     varchar(30)  NOT NULL ,
	[SeriesName]         varchar(30)  NOT NULL ,
	[PlanName]           varchar(30)  NOT NULL ,
	[CustLastName]       varchar(30)  NOT NULL ,
	[CustFirstName]      varchar(30)  NOT NULL ,
	[CustMiddleInitial]  varchar(30)  NOT NULL ,
	[CustSuffix]         varchar(30)  NOT NULL ,
	[CustDOB]            datetime  NOT NULL 
)
go

CREATE TABLE [Contract]
( 
	[ContractNumber]     varchar(30)  NOT NULL ,
	[LineOfBusiness]     varchar(30)  NOT NULL ,
	[SeriesName]         varchar(30)  NOT NULL ,
	[PlanName]           varchar(30)  NOT NULL ,
	[ActivityStatus]     varchar(30)  NULL ,
	[ActivityStatusDate] datetime  NULL ,
	[CoverageType]       varchar(30)  NULL ,
	[BillingMethod]      varchar(30)  NULL ,
	[AccountName]        varchar(30)  NULL ,
	[AccountName2]       varchar(30)  NULL ,
	[LocationAddress1]   varchar(30)  NULL ,
	[LocationAddress2]   varchar(30)  NULL ,
	[LocationCity]       varchar(30)  NULL ,
	[LocationState]      varchar(30)  NULL ,
	[LocationZip]        varchar(30)  NULL ,
	[CompanyCode]        varchar(30)  NULL ,
	[IndividualCompanyCode] varchar(30)  NULL ,
	[SuspendCode]        varchar(30)  NULL ,
	[ExceptionCode]      varchar(30)  NULL ,
	[ModalPremium]       varchar(30)  NULL ,
	[AutoPremiumLoan]    varchar(30)  NULL ,
	[CreditCardNo]       varchar(30)  NULL ,
	[ExpirationDate]     datetime  NULL ,
	[CardType]           varchar(30)  NULL ,
	[BankingTransitNumber] varchar(30)  NULL ,
	[BankingAccountType] varchar(30)  NULL ,
	[BankingAccountNumber] varchar(30)  NULL ,
	[PremiumPaymentLimit] varchar(30)  NULL ,
	[SubstandardRate]    varchar(30)  NULL ,
	[ValuationInterestCode] varchar(30)  NULL ,
	[SupplementalBenefitPlan] varchar(30)  NULL ,
	[SpecialAssemblyCode] varchar(30)  NULL ,
	[InForceFlag]        varchar(30)  NULL ,
	[PayUpDate]          datetime  NULL ,
	[Duration]           varchar(30)  NULL ,
	[ContractLanguage]   varchar(30)  NULL 
)
go

CREATE TABLE [ContractBenefit]
( 
	[ContractNumber]     varchar(30)  NOT NULL ,
	[LineOfBusiness]     varchar(30)  NOT NULL ,
	[SeriesName]         varchar(30)  NOT NULL ,
	[PlanName]           varchar(30)  NOT NULL ,
	[PolicyCountContribution] varchar(30)  NULL ,
	[BenefitName]        varchar(30)  NOT NULL 
)
go

CREATE TABLE [ContractingParty]
( 
	[ContractNumber]     varchar(30)  NOT NULL ,
	[LineOfBusiness]     varchar(30)  NOT NULL ,
	[SeriesName]         varchar(30)  NOT NULL ,
	[PlanName]           varchar(30)  NOT NULL ,
	[CustFirstName]      varchar(30)  NOT NULL ,
	[CustMiddleInitial]  varchar(30)  NOT NULL ,
	[CustSuffix]         varchar(30)  NOT NULL ,
	[CustDOB]            datetime  NOT NULL ,
	[CustLastName]       varchar(30)  NOT NULL 
)
go

CREATE TABLE [ContractPremium]
( 
	[ContractNumber]     varchar(30)  NOT NULL ,
	[LineOfBusiness]     varchar(30)  NOT NULL ,
	[SeriesName]         varchar(30)  NOT NULL ,
	[PlanName]           varchar(30)  NOT NULL ,
	[PremiumCode]        varchar(30)  NOT NULL ,
	[AnnualizedPremium]  integer  NULL ,
	[ProcessDate]        datetime  NULL ,
	[AppSignDate]        datetime  NULL ,
	[BenefitName]        varchar(30)  NOT NULL 
)
go

CREATE TABLE [CriticalInsuranceData]
( 
	[CustFirstName]      varchar(30)  NOT NULL ,
	[CustMiddleInitial]  varchar(30)  NOT NULL ,
	[CustSuffix]         varchar(30)  NOT NULL ,
	[CustDOB]            datetime  NOT NULL ,
	[CustLastName]       varchar(30)  NOT NULL ,
	[AssessmentDate]     datetime  NOT NULL ,
	[LastAssessmentFlag] bit  NULL ,
	[HypertensionFlag]   bit  NULL ,
	[PrevHeartDiseaseFlag] bit  NULL ,
	[WorkType]           varchar(30)  NULL ,
	[UrbanResidenceFlag] bit  NULL ,
	[AvgGlucoseLevel]    float  NULL ,
	[PrevStrokeFlag]     bit  NULL ,
	[AlcoholFlag]        bit  NULL ,
	[PhysicalHealthScore] integer  NULL ,
	[MentalHealthScore]  integer  NULL ,
	[DiffWalkingFlag]    bit  NULL ,
	[DiabeticFlag]       bit  NULL ,
	[PhysicalActivityFlag] bit  NULL ,
	[SleepTime]          integer  NULL ,
	[AsthmaFlag]         bit  NULL ,
	[KidneyDiseaseFlag]  bit  NULL ,
	[SkinCancerFlag]     bit  NULL 
)
go

CREATE TABLE [Customer]
( 
	[CustFirstName]      varchar(30)  NOT NULL ,
	[CustMiddleInitial]  varchar(30)  NOT NULL ,
	[CustSuffix]         varchar(30)  NOT NULL ,
	[CustDOB]            datetime  NOT NULL ,
	[CustSalutation]     varchar(30)  NULL ,
	[CusteMailAddress]   varchar(100)  NULL ,
	[SSN_TIN]            varchar(30)  NULL ,
	[SSN_Type]           varchar(30)  NULL ,
	[CustLastName]       varchar(30)  NOT NULL ,
	[PreferredLanguage]  varchar(30)  NULL ,
	[StartDate]          datetime  NULL ,
	[EndDate]            datetime  NULL ,
	[BMI]                float  NULL ,
	[NumChildren]        integer  NULL ,
	[EverMarriedFlag]    bit  NULL ,
	[Sex]                varchar(30)  NULL ,
	[SmokerFlag]         bit  NULL ,
	[LastAssessmentDate] datetime  NULL 
)
go

CREATE TABLE [CustomerAddress]
( 
	[CustLastName]       varchar(30)  NOT NULL ,
	[CustFirstName]      varchar(30)  NOT NULL ,
	[CustMiddleInitial]  varchar(30)  NOT NULL ,
	[CustSuffix]         varchar(30)  NOT NULL ,
	[CustDOB]            datetime  NOT NULL ,
	[CustAddress2]       varchar(30)  NOT NULL ,
	[CustAddress1]       varchar(30)  NOT NULL ,
	[CustCity]           varchar(30)  NOT NULL ,
	[CustState]          varchar(30)  NOT NULL ,
	[CustZip]            varchar(30)  NOT NULL ,
	[AnnualStartDate]    datetime  NOT NULL ,
	[AnnualEndDate]      datetime  NULL 
)
go

CREATE TABLE [FinancialInstitution]
( 
	[FIName]             varchar(30)  NOT NULL ,
	[FIAddress1]         varchar(30)  NOT NULL ,
	[FIAddress2]         varchar(30)  NOT NULL ,
	[FINCity]            varchar(30)  NOT NULL ,
	[FINState]           varchar(30)  NOT NULL ,
	[FINZip]             varchar(30)  NOT NULL ,
	[FIPhone]            varchar(30)  NOT NULL 
)
go

CREATE TABLE [Invoice]
( 
	[InvoiceNumber]      integer  NOT NULL ,
	[CustLastName]       varchar(30)  NULL ,
	[CustFirstName]      varchar(30)  NULL ,
	[CustMiddleInitial]  varchar(30)  NULL ,
	[CustSuffix]         varchar(30)  NULL ,
	[CustDOB]            datetime  NULL ,
	[PaidDate]           datetime  NULL ,
	[DueDate]            datetime  NULL ,
	[RunDate]            datetime  NULL ,
	[ContractNumber]     varchar(30)  NOT NULL ,
	[LineOfBusiness]     varchar(30)  NOT NULL ,
	[SeriesName]         varchar(30)  NOT NULL ,
	[PlanName]           varchar(30)  NOT NULL ,
	[BAcctName]          varchar(30)  NOT NULL ,
	[BAcctName2]         varchar(30)  NOT NULL ,
	[BillingAddress1]    varchar(30)  NOT NULL ,
	[BillingAddress2]    varchar(30)  NOT NULL ,
	[BillingCity]        varchar(30)  NOT NULL ,
	[BillingState]       varchar(30)  NOT NULL ,
	[BillingZip]         varchar(30)  NOT NULL 
)
go

CREATE TABLE [ManagerContract]
( 
	[SitCode]            varchar(30)  NOT NULL ,
	[CompanyCode]        varchar(30)  NOT NULL ,
	[WritingNumber]      integer  NOT NULL ,
	[IssueDate]          datetime  NOT NULL ,
	[ContractType]       varchar(30)  NULL ,
	[ContractSignDate]   datetime  NULL ,
	[Datetime]           datetime  NULL ,
	[ContractProcessDate] datetime  NULL ,
	[ParentSitCode]      varchar(30)  NULL ,
	[ParentCompanyCode]  varchar(30)  NULL ,
	[ParentWritingNumber] integer  NULL ,
	[ContractLevel]      varchar(30)  NOT NULL ,
	[StartDate]          datetime  NULL ,
	[ParentIssueDate]    datetime  NULL ,
	[EndDate]            datetime  NULL ,
	[AssocLastName]      varchar(30)  NULL ,
	[AssocFirstName]     varchar(30)  NULL ,
	[AssocMiddleInitial] varchar(30)  NULL ,
	[AssocSuffix]        varchar(30)  NULL ,
	[AssocDOB]           datetime  NULL 
)
go

CREATE TABLE [Premium_MgmtContract]
( 
	[ContractNumber]     varchar(30)  NOT NULL ,
	[LineOfBusiness]     varchar(30)  NOT NULL ,
	[SeriesName]         varchar(30)  NOT NULL ,
	[PlanName]           varchar(30)  NOT NULL ,
	[PremiumCode]        varchar(30)  NOT NULL ,
	[SitCode]            varchar(30)  NOT NULL ,
	[CompanyCode]        varchar(30)  NOT NULL ,
	[WritingNumber]      integer  NOT NULL ,
	[ContractLevel]      varchar(30)  NOT NULL ,
	[IssueDate]          datetime  NOT NULL ,
	[Amount]             integer  NULL ,
	[CommissionRate]     varchar(30)  NULL ,
	[BenefitName]        varchar(30)  NOT NULL 
)
go

CREATE TABLE [ProductPlan]
( 
	[LineOfBusiness]     varchar(30)  NOT NULL ,
	[SeriesName]         varchar(30)  NOT NULL ,
	[PlanName]           varchar(30)  NOT NULL ,
	[RatebookLocationCode] varchar(30)  NULL ,
	[PlanCode]           varchar(30)  NULL ,
	[Description]        varchar(30)  NULL 
)
go

CREATE TABLE [Remittance]
( 
	[FIName]             varchar(30)  NOT NULL ,
	[FIAddress1]         varchar(30)  NOT NULL ,
	[FIAddress2]         varchar(30)  NOT NULL ,
	[FINCity]            varchar(30)  NOT NULL ,
	[FINState]           varchar(30)  NOT NULL ,
	[FINZip]             varchar(30)  NOT NULL ,
	[FIPhone]            varchar(30)  NOT NULL ,
	[CustFirstName]      varchar(30)  NULL ,
	[CustMiddleInitial]  varchar(30)  NULL ,
	[CustDOB]            datetime  NULL ,
	[CustLastName]       varchar(30)  NULL ,
	[ContractNumber]     varchar(30)  NOT NULL ,
	[LineOfBusiness]     varchar(30)  NOT NULL ,
	[SeriesName]         varchar(30)  NOT NULL ,
	[PlanName]           varchar(30)  NOT NULL ,
	[RemittanceFreq]     varchar(30)  NULL ,
	[RemittanceDate]     datetime  NULL ,
	[PaymentMethod]      varchar(30)  NULL ,
	[PaymentDate]        datetime  NULL ,
	[CustSuffix]         varchar(30)  NULL 
)
go

CREATE TABLE [StateRegions]
( 
	[CustState]          varchar(30)  NOT NULL ,
	[Region]             varchar(30)  NULL 
)
go

ALTER TABLE [Account]
	ADD CONSTRAINT [XPKAccount] PRIMARY KEY  CLUSTERED ([AccountName] ASC,[AccountName2] ASC,[LocationAddress1] ASC,[LocationAddress2] ASC,[LocationCity] ASC,[LocationState] ASC,[LocationZip] ASC,[CompanyCode] ASC)
go

ALTER TABLE [Account_Associate]
	ADD CONSTRAINT [XPKAccount_Associate] PRIMARY KEY  CLUSTERED ([SitCode] ASC,[CompanyCode] ASC,[WritingNumber] ASC,[ContractLevel] ASC,[IssueDate] ASC,[AccountName] ASC,[AccountName2] ASC,[LocationAddress1] ASC,[LocationAddress2] ASC,[LocationCity] ASC,[LocationState] ASC,[LocationZip] ASC)
go

ALTER TABLE [Account_BillingAccount]
	ADD CONSTRAINT [XPKAccount_BillingAccount] PRIMARY KEY  CLUSTERED ([AccountName] ASC,[AccountName2] ASC,[LocationAddress1] ASC,[LocationAddress2] ASC,[LocationCity] ASC,[LocationState] ASC,[LocationZip] ASC,[CompanyCode] ASC,[BAcctName] ASC,[BAcctName2] ASC,[BillingAddress1] ASC,[BillingAddress2] ASC,[BillingCity] ASC,[BillingState] ASC,[BillingZip] ASC,[RelationshipType] ASC,[StartDate] ASC)
go

ALTER TABLE [Account_ProductPlan]
	ADD CONSTRAINT [XPKAccount_ProductPlan] PRIMARY KEY  CLUSTERED ([AccountName] ASC,[AccountName2] ASC,[LocationAddress1] ASC,[LocationAddress2] ASC,[LocationCity] ASC,[LocationState] ASC,[LocationZip] ASC,[CompanyCode] ASC,[LineOfBusiness] ASC,[SeriesName] ASC,[PlanName] ASC,[StartDate] ASC)
go

ALTER TABLE [AccountMember]
	ADD CONSTRAINT [XPKAccountMember] PRIMARY KEY  CLUSTERED ([CustLastName] ASC,[CustFirstName] ASC,[CustMiddleInitial] ASC,[CustSuffix] ASC,[CustDOB] ASC,[AccountName] ASC,[AccountName2] ASC,[LocationAddress1] ASC,[LocationAddress2] ASC,[LocationCity] ASC,[LocationState] ASC,[LocationZip] ASC,[CompanyCode] ASC,[StartDate] ASC)
go

ALTER TABLE [Associate]
	ADD CONSTRAINT [XPKAssociate] PRIMARY KEY  CLUSTERED ([AssocLastName] ASC,[AssocFirstName] ASC,[AssocMiddleInitial] ASC,[AssocSuffix] ASC,[AssocDOB] ASC)
go

ALTER TABLE [BenefitPremiumPredictionModel]
	ADD CONSTRAINT [XPKBenefitPremiumPredictionModel] PRIMARY KEY  CLUSTERED ([BenefitName] ASC)
go

ALTER TABLE [BillingAccount]
	ADD CONSTRAINT [XPKBillingAccount] PRIMARY KEY  CLUSTERED ([BAcctName] ASC,[BAcctName2] ASC,[BillingAddress1] ASC,[BillingAddress2] ASC,[BillingCity] ASC,[BillingState] ASC,[BillingZip] ASC)
go

ALTER TABLE [Claim]
	ADD CONSTRAINT [XPKClaim] PRIMARY KEY  CLUSTERED ([ClaimNumber] ASC,[ContractNumber] ASC,[LineOfBusiness] ASC,[SeriesName] ASC,[PlanName] ASC,[CustLastName] ASC,[CustFirstName] ASC,[CustMiddleInitial] ASC,[CustSuffix] ASC,[CustDOB] ASC)
go

CREATE NONCLUSTERED INDEX [DateIndex] ON [Claim]
( 
	[ClaimDate]           ASC
)
go

ALTER TABLE [ClaimEvent]
	ADD CONSTRAINT [XPKClaimEvent] PRIMARY KEY  CLUSTERED ([ClaimNumber] ASC,[ContractNumber] ASC,[LineOfBusiness] ASC,[SeriesName] ASC,[PlanName] ASC,[FIName] ASC,[FIAddress1] ASC,[FIAddress2] ASC,[FINCity] ASC,[FINState] ASC,[FINZip] ASC,[FIPhone] ASC,[CustLastName] ASC,[CustFirstName] ASC,[CustMiddleInitial] ASC,[CustSuffix] ASC,[CustDOB] ASC)
go

ALTER TABLE [ClaimImage]
	ADD CONSTRAINT [XPKClaimImage] PRIMARY KEY  CLUSTERED ([ClaimNumber] ASC,[DocumentId] ASC,[ContractNumber] ASC,[LineOfBusiness] ASC,[SeriesName] ASC,[PlanName] ASC,[CustLastName] ASC,[CustFirstName] ASC,[CustMiddleInitial] ASC,[CustSuffix] ASC,[CustDOB] ASC)
go

ALTER TABLE [Contract]
	ADD CONSTRAINT [XPKContract_h] PRIMARY KEY  CLUSTERED ([ContractNumber] ASC,[LineOfBusiness] ASC,[SeriesName] ASC,[PlanName] ASC)
go

CREATE NONCLUSTERED INDEX [CompanyIndex] ON [Contract]
( 
	[LocationAddress1]    ASC,
	[LocationAddress2]    ASC,
	[LocationCity]        ASC,
	[LocationState]       ASC,
	[LocationZip]         ASC,
	[CompanyCode]         ASC,
	[AccountName]         ASC,
	[AccountName2]        ASC
)
go

ALTER TABLE [ContractBenefit]
	ADD CONSTRAINT [XPKContractBenefit] PRIMARY KEY  CLUSTERED ([ContractNumber] ASC,[LineOfBusiness] ASC,[SeriesName] ASC,[PlanName] ASC,[BenefitName] ASC)
go

ALTER TABLE [ContractingParty]
	ADD CONSTRAINT [XPKContractingParty] PRIMARY KEY  CLUSTERED ([ContractNumber] ASC,[LineOfBusiness] ASC,[SeriesName] ASC,[PlanName] ASC,[CustFirstName] ASC,[CustMiddleInitial] ASC,[CustSuffix] ASC,[CustDOB] ASC,[CustLastName] ASC)
go

ALTER TABLE [ContractPremium]
	ADD CONSTRAINT [XPKContractPremium] PRIMARY KEY  CLUSTERED ([ContractNumber] ASC,[LineOfBusiness] ASC,[SeriesName] ASC,[PlanName] ASC,[PremiumCode] ASC,[BenefitName] ASC)
go

ALTER TABLE [CriticalInsuranceData]
	ADD CONSTRAINT [XPKCriticalInsuranceData] PRIMARY KEY  CLUSTERED ([CustFirstName] ASC,[CustMiddleInitial] ASC,[CustSuffix] ASC,[CustDOB] ASC,[CustLastName] ASC,[AssessmentDate] ASC)
go

CREATE NONCLUSTERED INDEX [CustIndex] ON [CriticalInsuranceData]
( 
	[CustFirstName]       ASC,
	[CustLastName]        ASC,
	[CustDOB]             ASC,
	[CustMiddleInitial]   ASC,
	[CustSuffix]          ASC
)
go

ALTER TABLE [Customer]
	ADD CONSTRAINT [XPKCustomer] PRIMARY KEY  CLUSTERED ([CustFirstName] ASC,[CustMiddleInitial] ASC,[CustSuffix] ASC,[CustDOB] ASC,[CustLastName] ASC)
go

ALTER TABLE [Customer]
	ADD CONSTRAINT [SSNIndexCustomer] UNIQUE ([SSN_TIN]  ASC,[SSN_Type]  ASC)
go

CREATE NONCLUSTERED INDEX [EmailIndexCustomer] ON [Customer]
( 
	[CusteMailAddress]    ASC
)
go

ALTER TABLE [CustomerAddress]
	ADD CONSTRAINT [XPKCustomerAddress] PRIMARY KEY  CLUSTERED ([CustLastName] ASC,[CustFirstName] ASC,[CustMiddleInitial] ASC,[CustSuffix] ASC,[CustDOB] ASC,[CustAddress1] ASC,[CustAddress2] ASC,[CustCity] ASC,[CustState] ASC,[CustZip] ASC,[AnnualStartDate] ASC)
go

ALTER TABLE [FinancialInstitution]
	ADD CONSTRAINT [XPKFinancialInstitution] PRIMARY KEY  CLUSTERED ([FIName] ASC,[FIAddress1] ASC,[FIAddress2] ASC,[FINCity] ASC,[FINState] ASC,[FINZip] ASC,[FIPhone] ASC)
go

ALTER TABLE [Invoice]
	ADD CONSTRAINT [XPKInvoice] PRIMARY KEY  CLUSTERED ([InvoiceNumber] ASC,[ContractNumber] ASC,[LineOfBusiness] ASC,[SeriesName] ASC,[PlanName] ASC,[BAcctName] ASC,[BAcctName2] ASC,[BillingAddress1] ASC,[BillingAddress2] ASC,[BillingCity] ASC,[BillingState] ASC,[BillingZip] ASC)
go

CREATE NONCLUSTERED INDEX [CustIndexInv] ON [Invoice]
( 
	[CustFirstName]       ASC,
	[CustMiddleInitial]   ASC,
	[CustLastName]        ASC,
	[CustDOB]             ASC,
	[CustSuffix]          ASC
)
go

ALTER TABLE [ManagerContract]
	ADD CONSTRAINT [XPKManagerContract] PRIMARY KEY  CLUSTERED ([SitCode] ASC,[CompanyCode] ASC,[WritingNumber] ASC,[IssueDate] ASC,[ContractLevel] ASC)
go

ALTER TABLE [Premium_MgmtContract]
	ADD CONSTRAINT [XPKPremium_MgmtContract] PRIMARY KEY  CLUSTERED ([ContractNumber] ASC,[LineOfBusiness] ASC,[SeriesName] ASC,[PlanName] ASC,[PremiumCode] ASC,[SitCode] ASC,[CompanyCode] ASC,[WritingNumber] ASC,[ContractLevel] ASC,[IssueDate] ASC,[BenefitName] ASC)
go

ALTER TABLE [ProductPlan]
	ADD CONSTRAINT [XPKProductPlan] PRIMARY KEY  CLUSTERED ([LineOfBusiness] ASC,[SeriesName] ASC,[PlanName] ASC)
go

ALTER TABLE [ProductPlan]
	ADD CONSTRAINT [PlanCodeIndex] UNIQUE ([PlanCode]  ASC)
go

ALTER TABLE [Remittance]
	ADD CONSTRAINT [XPKRemittance] PRIMARY KEY  CLUSTERED ([FIName] ASC,[FIAddress1] ASC,[FIAddress2] ASC,[FINCity] ASC,[FINState] ASC,[FINZip] ASC,[FIPhone] ASC,[ContractNumber] ASC,[LineOfBusiness] ASC,[SeriesName] ASC,[PlanName] ASC)
go

CREATE NONCLUSTERED INDEX [CustIndexRem] ON [Remittance]
( 
	[CustFirstName]       ASC,
	[CustLastName]        ASC,
	[CustMiddleInitial]   ASC,
	[CustSuffix]          ASC,
	[CustDOB]             ASC
)
go

ALTER TABLE [StateRegions]
	ADD CONSTRAINT [XPKStateRegions] PRIMARY KEY  CLUSTERED ([CustState] ASC)
go


ALTER TABLE [Account_Associate]
	ADD CONSTRAINT [R_45] FOREIGN KEY ([SitCode],[CompanyCode],[WritingNumber],[IssueDate],[ContractLevel]) REFERENCES [ManagerContract]([SitCode],[CompanyCode],[WritingNumber],[IssueDate],[ContractLevel])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Account_Associate]
	ADD CONSTRAINT [R_46] FOREIGN KEY ([AccountName],[AccountName2],[LocationAddress1],[LocationAddress2],[LocationCity],[LocationState],[LocationZip],[CompanyCode]) REFERENCES [Account]([AccountName],[AccountName2],[LocationAddress1],[LocationAddress2],[LocationCity],[LocationState],[LocationZip],[CompanyCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Account_BillingAccount]
	ADD CONSTRAINT [R_59] FOREIGN KEY ([AccountName],[AccountName2],[LocationAddress1],[LocationAddress2],[LocationCity],[LocationState],[LocationZip],[CompanyCode]) REFERENCES [Account]([AccountName],[AccountName2],[LocationAddress1],[LocationAddress2],[LocationCity],[LocationState],[LocationZip],[CompanyCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Account_BillingAccount]
	ADD CONSTRAINT [R_60] FOREIGN KEY ([BAcctName],[BAcctName2],[BillingAddress1],[BillingAddress2],[BillingCity],[BillingState],[BillingZip]) REFERENCES [BillingAccount]([BAcctName],[BAcctName2],[BillingAddress1],[BillingAddress2],[BillingCity],[BillingState],[BillingZip])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Account_ProductPlan]
	ADD CONSTRAINT [R_63] FOREIGN KEY ([AccountName],[AccountName2],[LocationAddress1],[LocationAddress2],[LocationCity],[LocationState],[LocationZip],[CompanyCode]) REFERENCES [Account]([AccountName],[AccountName2],[LocationAddress1],[LocationAddress2],[LocationCity],[LocationState],[LocationZip],[CompanyCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Account_ProductPlan]
	ADD CONSTRAINT [R_64] FOREIGN KEY ([LineOfBusiness],[SeriesName],[PlanName]) REFERENCES [ProductPlan]([LineOfBusiness],[SeriesName],[PlanName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [AccountMember]
	ADD CONSTRAINT [R_6] FOREIGN KEY ([CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB],[CustLastName]) REFERENCES [Customer]([CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB],[CustLastName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [AccountMember]
	ADD CONSTRAINT [R_44] FOREIGN KEY ([AccountName],[AccountName2],[LocationAddress1],[LocationAddress2],[LocationCity],[LocationState],[LocationZip],[CompanyCode]) REFERENCES [Account]([AccountName],[AccountName2],[LocationAddress1],[LocationAddress2],[LocationCity],[LocationState],[LocationZip],[CompanyCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Claim]
	ADD CONSTRAINT [R_54] FOREIGN KEY ([ContractNumber],[LineOfBusiness],[SeriesName],[PlanName]) REFERENCES [Contract]([ContractNumber],[LineOfBusiness],[SeriesName],[PlanName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Claim]
	ADD CONSTRAINT [R_67] FOREIGN KEY ([CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB],[CustLastName]) REFERENCES [Customer]([CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB],[CustLastName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [ClaimEvent]
	ADD CONSTRAINT [R_20] FOREIGN KEY ([FIName],[FIAddress1],[FIAddress2],[FINCity],[FINState],[FINZip],[FIPhone]) REFERENCES [FinancialInstitution]([FIName],[FIAddress1],[FIAddress2],[FINCity],[FINState],[FINZip],[FIPhone])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ClaimEvent]
	ADD CONSTRAINT [R_55] FOREIGN KEY ([ClaimNumber],[ContractNumber],[LineOfBusiness],[SeriesName],[PlanName],[CustLastName],[CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB]) REFERENCES [Claim]([ClaimNumber],[ContractNumber],[LineOfBusiness],[SeriesName],[PlanName],[CustLastName],[CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [ClaimImage]
	ADD CONSTRAINT [R_16] FOREIGN KEY ([ClaimNumber],[ContractNumber],[LineOfBusiness],[SeriesName],[PlanName],[CustLastName],[CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB]) REFERENCES [Claim]([ClaimNumber],[ContractNumber],[LineOfBusiness],[SeriesName],[PlanName],[CustLastName],[CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Contract]
	ADD CONSTRAINT [R_66] FOREIGN KEY ([LineOfBusiness],[SeriesName],[PlanName]) REFERENCES [ProductPlan]([LineOfBusiness],[SeriesName],[PlanName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Contract]
	ADD CONSTRAINT [R_80] FOREIGN KEY ([AccountName],[AccountName2],[LocationAddress1],[LocationAddress2],[LocationCity],[LocationState],[LocationZip],[CompanyCode]) REFERENCES [Account]([AccountName],[AccountName2],[LocationAddress1],[LocationAddress2],[LocationCity],[LocationState],[LocationZip],[CompanyCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [ContractBenefit]
	ADD CONSTRAINT [R_47] FOREIGN KEY ([ContractNumber],[LineOfBusiness],[SeriesName],[PlanName]) REFERENCES [Contract]([ContractNumber],[LineOfBusiness],[SeriesName],[PlanName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ContractBenefit]
	ADD CONSTRAINT [R_65] FOREIGN KEY ([LineOfBusiness],[SeriesName],[PlanName]) REFERENCES [ProductPlan]([LineOfBusiness],[SeriesName],[PlanName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ContractBenefit]
	ADD CONSTRAINT [R_79] FOREIGN KEY ([BenefitName]) REFERENCES [BenefitPremiumPredictionModel]([BenefitName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [ContractingParty]
	ADD CONSTRAINT [R_35] FOREIGN KEY ([ContractNumber],[LineOfBusiness],[SeriesName],[PlanName]) REFERENCES [Contract]([ContractNumber],[LineOfBusiness],[SeriesName],[PlanName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ContractingParty]
	ADD CONSTRAINT [R_37] FOREIGN KEY ([CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB],[CustLastName]) REFERENCES [Customer]([CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB],[CustLastName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [ContractPremium]
	ADD CONSTRAINT [R_48] FOREIGN KEY ([ContractNumber],[LineOfBusiness],[SeriesName],[PlanName],[BenefitName]) REFERENCES [ContractBenefit]([ContractNumber],[LineOfBusiness],[SeriesName],[PlanName],[BenefitName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [CriticalInsuranceData]
	ADD CONSTRAINT [R_72] FOREIGN KEY ([CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB],[CustLastName]) REFERENCES [Customer]([CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB],[CustLastName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [CustomerAddress]
	ADD CONSTRAINT [R_1] FOREIGN KEY ([CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB],[CustLastName]) REFERENCES [Customer]([CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB],[CustLastName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [CustomerAddress]
	ADD CONSTRAINT [R_71] FOREIGN KEY ([CustState]) REFERENCES [StateRegions]([CustState])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Invoice]
	ADD CONSTRAINT [R_52] FOREIGN KEY ([CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB],[CustLastName]) REFERENCES [Customer]([CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB],[CustLastName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Invoice]
	ADD CONSTRAINT [R_57] FOREIGN KEY ([ContractNumber],[LineOfBusiness],[SeriesName],[PlanName]) REFERENCES [Contract]([ContractNumber],[LineOfBusiness],[SeriesName],[PlanName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Invoice]
	ADD CONSTRAINT [R_58] FOREIGN KEY ([BAcctName],[BAcctName2],[BillingAddress1],[BillingAddress2],[BillingCity],[BillingState],[BillingZip]) REFERENCES [BillingAccount]([BAcctName],[BAcctName2],[BillingAddress1],[BillingAddress2],[BillingCity],[BillingState],[BillingZip])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [ManagerContract]
	ADD CONSTRAINT [R_62] FOREIGN KEY ([AssocLastName],[AssocFirstName],[AssocMiddleInitial],[AssocSuffix],[AssocDOB]) REFERENCES [Associate]([AssocLastName],[AssocFirstName],[AssocMiddleInitial],[AssocSuffix],[AssocDOB])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ManagerContract]
	ADD CONSTRAINT [R_70] FOREIGN KEY ([ParentSitCode],[ParentCompanyCode],[ParentWritingNumber],[ParentIssueDate],[ContractLevel]) REFERENCES [ManagerContract]([SitCode],[CompanyCode],[WritingNumber],[IssueDate],[ContractLevel])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Premium_MgmtContract]
	ADD CONSTRAINT [R_49] FOREIGN KEY ([ContractNumber],[LineOfBusiness],[SeriesName],[PlanName],[PremiumCode],[BenefitName]) REFERENCES [ContractPremium]([ContractNumber],[LineOfBusiness],[SeriesName],[PlanName],[PremiumCode],[BenefitName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Premium_MgmtContract]
	ADD CONSTRAINT [R_50] FOREIGN KEY ([SitCode],[CompanyCode],[WritingNumber],[IssueDate],[ContractLevel]) REFERENCES [ManagerContract]([SitCode],[CompanyCode],[WritingNumber],[IssueDate],[ContractLevel])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Remittance]
	ADD CONSTRAINT [R_27] FOREIGN KEY ([FIName],[FIAddress1],[FIAddress2],[FINCity],[FINState],[FINZip],[FIPhone]) REFERENCES [FinancialInstitution]([FIName],[FIAddress1],[FIAddress2],[FINCity],[FINState],[FINZip],[FIPhone])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Remittance]
	ADD CONSTRAINT [R_28] FOREIGN KEY ([CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB],[CustLastName]) REFERENCES [Customer]([CustFirstName],[CustMiddleInitial],[CustSuffix],[CustDOB],[CustLastName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Remittance]
	ADD CONSTRAINT [R_40] FOREIGN KEY ([ContractNumber],[LineOfBusiness],[SeriesName],[PlanName]) REFERENCES [Contract]([ContractNumber],[LineOfBusiness],[SeriesName],[PlanName])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


CREATE TRIGGER tD_Account ON Account FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Account */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Account  Contract on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0009f93d", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Contract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_80", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
    IF EXISTS (
      SELECT * FROM deleted,Contract
      WHERE
        /*  %JoinFKPK(Contract,deleted," = "," AND") */
        Contract.AccountName = deleted.AccountName AND
        Contract.AccountName2 = deleted.AccountName2 AND
        Contract.LocationAddress1 = deleted.LocationAddress1 AND
        Contract.LocationAddress2 = deleted.LocationAddress2 AND
        Contract.LocationCity = deleted.LocationCity AND
        Contract.LocationState = deleted.LocationState AND
        Contract.LocationZip = deleted.LocationZip AND
        Contract.CompanyCode = deleted.CompanyCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Account because Contract exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Account  Account_ProductPlan on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Account_ProductPlan"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_63", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
    IF EXISTS (
      SELECT * FROM deleted,Account_ProductPlan
      WHERE
        /*  %JoinFKPK(Account_ProductPlan,deleted," = "," AND") */
        Account_ProductPlan.AccountName = deleted.AccountName AND
        Account_ProductPlan.AccountName2 = deleted.AccountName2 AND
        Account_ProductPlan.LocationAddress1 = deleted.LocationAddress1 AND
        Account_ProductPlan.LocationAddress2 = deleted.LocationAddress2 AND
        Account_ProductPlan.LocationCity = deleted.LocationCity AND
        Account_ProductPlan.LocationState = deleted.LocationState AND
        Account_ProductPlan.LocationZip = deleted.LocationZip AND
        Account_ProductPlan.CompanyCode = deleted.CompanyCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Account because Account_ProductPlan exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Account  Account_BillingAccount on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Account_BillingAccount"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_59", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
    IF EXISTS (
      SELECT * FROM deleted,Account_BillingAccount
      WHERE
        /*  %JoinFKPK(Account_BillingAccount,deleted," = "," AND") */
        Account_BillingAccount.AccountName = deleted.AccountName AND
        Account_BillingAccount.AccountName2 = deleted.AccountName2 AND
        Account_BillingAccount.LocationAddress1 = deleted.LocationAddress1 AND
        Account_BillingAccount.LocationAddress2 = deleted.LocationAddress2 AND
        Account_BillingAccount.LocationCity = deleted.LocationCity AND
        Account_BillingAccount.LocationState = deleted.LocationState AND
        Account_BillingAccount.LocationZip = deleted.LocationZip AND
        Account_BillingAccount.CompanyCode = deleted.CompanyCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Account because Account_BillingAccount exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Account  Account_Associate on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Account_Associate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_46", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
    IF EXISTS (
      SELECT * FROM deleted,Account_Associate
      WHERE
        /*  %JoinFKPK(Account_Associate,deleted," = "," AND") */
        Account_Associate.AccountName = deleted.AccountName AND
        Account_Associate.AccountName2 = deleted.AccountName2 AND
        Account_Associate.LocationAddress1 = deleted.LocationAddress1 AND
        Account_Associate.LocationAddress2 = deleted.LocationAddress2 AND
        Account_Associate.LocationCity = deleted.LocationCity AND
        Account_Associate.LocationState = deleted.LocationState AND
        Account_Associate.LocationZip = deleted.LocationZip AND
        Account_Associate.CompanyCode = deleted.CompanyCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Account because Account_Associate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Account  AccountMember on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="AccountMember"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_44", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
    IF EXISTS (
      SELECT * FROM deleted,AccountMember
      WHERE
        /*  %JoinFKPK(AccountMember,deleted," = "," AND") */
        AccountMember.AccountName = deleted.AccountName AND
        AccountMember.AccountName2 = deleted.AccountName2 AND
        AccountMember.LocationAddress1 = deleted.LocationAddress1 AND
        AccountMember.LocationAddress2 = deleted.LocationAddress2 AND
        AccountMember.LocationCity = deleted.LocationCity AND
        AccountMember.LocationState = deleted.LocationState AND
        AccountMember.LocationZip = deleted.LocationZip AND
        AccountMember.CompanyCode = deleted.CompanyCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Account because AccountMember exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Account ON Account FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Account */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAccountName varchar(30), 
           @insAccountName2 varchar(30), 
           @insLocationAddress1 varchar(30), 
           @insLocationAddress2 varchar(30), 
           @insLocationCity varchar(30), 
           @insLocationState varchar(30), 
           @insLocationZip varchar(30), 
           @insCompanyCode varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Account  Contract on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000c019b", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Contract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_80", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AccountName) OR
    UPDATE(AccountName2) OR
    UPDATE(LocationAddress1) OR
    UPDATE(LocationAddress2) OR
    UPDATE(LocationCity) OR
    UPDATE(LocationState) OR
    UPDATE(LocationZip) OR
    UPDATE(CompanyCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Contract
      WHERE
        /*  %JoinFKPK(Contract,deleted," = "," AND") */
        Contract.AccountName = deleted.AccountName AND
        Contract.AccountName2 = deleted.AccountName2 AND
        Contract.LocationAddress1 = deleted.LocationAddress1 AND
        Contract.LocationAddress2 = deleted.LocationAddress2 AND
        Contract.LocationCity = deleted.LocationCity AND
        Contract.LocationState = deleted.LocationState AND
        Contract.LocationZip = deleted.LocationZip AND
        Contract.CompanyCode = deleted.CompanyCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Account because Contract exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Account  Account_ProductPlan on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Account_ProductPlan"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_63", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AccountName) OR
    UPDATE(AccountName2) OR
    UPDATE(LocationAddress1) OR
    UPDATE(LocationAddress2) OR
    UPDATE(LocationCity) OR
    UPDATE(LocationState) OR
    UPDATE(LocationZip) OR
    UPDATE(CompanyCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Account_ProductPlan
      WHERE
        /*  %JoinFKPK(Account_ProductPlan,deleted," = "," AND") */
        Account_ProductPlan.AccountName = deleted.AccountName AND
        Account_ProductPlan.AccountName2 = deleted.AccountName2 AND
        Account_ProductPlan.LocationAddress1 = deleted.LocationAddress1 AND
        Account_ProductPlan.LocationAddress2 = deleted.LocationAddress2 AND
        Account_ProductPlan.LocationCity = deleted.LocationCity AND
        Account_ProductPlan.LocationState = deleted.LocationState AND
        Account_ProductPlan.LocationZip = deleted.LocationZip AND
        Account_ProductPlan.CompanyCode = deleted.CompanyCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Account because Account_ProductPlan exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Account  Account_BillingAccount on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Account_BillingAccount"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_59", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AccountName) OR
    UPDATE(AccountName2) OR
    UPDATE(LocationAddress1) OR
    UPDATE(LocationAddress2) OR
    UPDATE(LocationCity) OR
    UPDATE(LocationState) OR
    UPDATE(LocationZip) OR
    UPDATE(CompanyCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Account_BillingAccount
      WHERE
        /*  %JoinFKPK(Account_BillingAccount,deleted," = "," AND") */
        Account_BillingAccount.AccountName = deleted.AccountName AND
        Account_BillingAccount.AccountName2 = deleted.AccountName2 AND
        Account_BillingAccount.LocationAddress1 = deleted.LocationAddress1 AND
        Account_BillingAccount.LocationAddress2 = deleted.LocationAddress2 AND
        Account_BillingAccount.LocationCity = deleted.LocationCity AND
        Account_BillingAccount.LocationState = deleted.LocationState AND
        Account_BillingAccount.LocationZip = deleted.LocationZip AND
        Account_BillingAccount.CompanyCode = deleted.CompanyCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Account because Account_BillingAccount exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Account  Account_Associate on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Account_Associate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_46", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AccountName) OR
    UPDATE(AccountName2) OR
    UPDATE(LocationAddress1) OR
    UPDATE(LocationAddress2) OR
    UPDATE(LocationCity) OR
    UPDATE(LocationState) OR
    UPDATE(LocationZip) OR
    UPDATE(CompanyCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Account_Associate
      WHERE
        /*  %JoinFKPK(Account_Associate,deleted," = "," AND") */
        Account_Associate.AccountName = deleted.AccountName AND
        Account_Associate.AccountName2 = deleted.AccountName2 AND
        Account_Associate.LocationAddress1 = deleted.LocationAddress1 AND
        Account_Associate.LocationAddress2 = deleted.LocationAddress2 AND
        Account_Associate.LocationCity = deleted.LocationCity AND
        Account_Associate.LocationState = deleted.LocationState AND
        Account_Associate.LocationZip = deleted.LocationZip AND
        Account_Associate.CompanyCode = deleted.CompanyCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Account because Account_Associate exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Account  AccountMember on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="AccountMember"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_44", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AccountName) OR
    UPDATE(AccountName2) OR
    UPDATE(LocationAddress1) OR
    UPDATE(LocationAddress2) OR
    UPDATE(LocationCity) OR
    UPDATE(LocationState) OR
    UPDATE(LocationZip) OR
    UPDATE(CompanyCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,AccountMember
      WHERE
        /*  %JoinFKPK(AccountMember,deleted," = "," AND") */
        AccountMember.AccountName = deleted.AccountName AND
        AccountMember.AccountName2 = deleted.AccountName2 AND
        AccountMember.LocationAddress1 = deleted.LocationAddress1 AND
        AccountMember.LocationAddress2 = deleted.LocationAddress2 AND
        AccountMember.LocationCity = deleted.LocationCity AND
        AccountMember.LocationState = deleted.LocationState AND
        AccountMember.LocationZip = deleted.LocationZip AND
        AccountMember.CompanyCode = deleted.CompanyCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Account because AccountMember exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Account_Associate ON Account_Associate FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Account_Associate */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Account  Account_Associate on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0005251a", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Account_Associate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_46", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
    IF EXISTS (SELECT * FROM deleted,Account
      WHERE
        /* %JoinFKPK(deleted,Account," = "," AND") */
        deleted.AccountName = Account.AccountName AND
        deleted.AccountName2 = Account.AccountName2 AND
        deleted.LocationAddress1 = Account.LocationAddress1 AND
        deleted.LocationAddress2 = Account.LocationAddress2 AND
        deleted.LocationCity = Account.LocationCity AND
        deleted.LocationState = Account.LocationState AND
        deleted.LocationZip = Account.LocationZip AND
        deleted.CompanyCode = Account.CompanyCode AND
        NOT EXISTS (
          SELECT * FROM Account_Associate
          WHERE
            /* %JoinFKPK(Account_Associate,Account," = "," AND") */
            Account_Associate.AccountName = Account.AccountName AND
            Account_Associate.AccountName2 = Account.AccountName2 AND
            Account_Associate.LocationAddress1 = Account.LocationAddress1 AND
            Account_Associate.LocationAddress2 = Account.LocationAddress2 AND
            Account_Associate.LocationCity = Account.LocationCity AND
            Account_Associate.LocationState = Account.LocationState AND
            Account_Associate.LocationZip = Account.LocationZip AND
            Account_Associate.CompanyCode = Account.CompanyCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Account_Associate because Account exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ManagerContract  Account_Associate on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ManagerContract"
    CHILD_OWNER="", CHILD_TABLE="Account_Associate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_45", FK_COLUMNS="SitCode""CompanyCode""WritingNumber""ContractLevel""IssueDate" */
    IF EXISTS (SELECT * FROM deleted,ManagerContract
      WHERE
        /* %JoinFKPK(deleted,ManagerContract," = "," AND") */
        deleted.SitCode = ManagerContract.SitCode AND
        deleted.CompanyCode = ManagerContract.CompanyCode AND
        deleted.WritingNumber = ManagerContract.WritingNumber AND
        deleted.IssueDate = ManagerContract.IssueDate AND
        deleted.ContractLevel = ManagerContract.ContractLevel AND
        NOT EXISTS (
          SELECT * FROM Account_Associate
          WHERE
            /* %JoinFKPK(Account_Associate,ManagerContract," = "," AND") */
            Account_Associate.SitCode = ManagerContract.SitCode AND
            Account_Associate.CompanyCode = ManagerContract.CompanyCode AND
            Account_Associate.WritingNumber = ManagerContract.WritingNumber AND
            Account_Associate.IssueDate = ManagerContract.IssueDate AND
            Account_Associate.ContractLevel = ManagerContract.ContractLevel
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Account_Associate because ManagerContract exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Account_Associate ON Account_Associate FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Account_Associate */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSitCode varchar(30), 
           @insCompanyCode varchar(30), 
           @insWritingNumber integer, 
           @insContractLevel varchar(30), 
           @insIssueDate datetime, 
           @insAccountName varchar(30), 
           @insAccountName2 varchar(30), 
           @insLocationAddress1 varchar(30), 
           @insLocationAddress2 varchar(30), 
           @insLocationCity varchar(30), 
           @insLocationState varchar(30), 
           @insLocationZip varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Account  Account_Associate on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00048c2a", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Account_Associate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_46", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AccountName) OR
    UPDATE(AccountName2) OR
    UPDATE(LocationAddress1) OR
    UPDATE(LocationAddress2) OR
    UPDATE(LocationCity) OR
    UPDATE(LocationState) OR
    UPDATE(LocationZip) OR
    UPDATE(CompanyCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Account
        WHERE
          /* %JoinFKPK(inserted,Account) */
          inserted.AccountName = Account.AccountName and
          inserted.AccountName2 = Account.AccountName2 and
          inserted.LocationAddress1 = Account.LocationAddress1 and
          inserted.LocationAddress2 = Account.LocationAddress2 and
          inserted.LocationCity = Account.LocationCity and
          inserted.LocationState = Account.LocationState and
          inserted.LocationZip = Account.LocationZip and
          inserted.CompanyCode = Account.CompanyCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Account_Associate because Account does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ManagerContract  Account_Associate on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ManagerContract"
    CHILD_OWNER="", CHILD_TABLE="Account_Associate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_45", FK_COLUMNS="SitCode""CompanyCode""WritingNumber""ContractLevel""IssueDate" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SitCode) OR
    UPDATE(CompanyCode) OR
    UPDATE(WritingNumber) OR
    UPDATE(IssueDate) OR
    UPDATE(ContractLevel)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ManagerContract
        WHERE
          /* %JoinFKPK(inserted,ManagerContract) */
          inserted.SitCode = ManagerContract.SitCode and
          inserted.CompanyCode = ManagerContract.CompanyCode and
          inserted.WritingNumber = ManagerContract.WritingNumber and
          inserted.IssueDate = ManagerContract.IssueDate and
          inserted.ContractLevel = ManagerContract.ContractLevel
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Account_Associate because ManagerContract does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Account_BillingAccount ON Account_BillingAccount FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Account_BillingAccount */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BillingAccount  Account_BillingAccount on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0005f600", PARENT_OWNER="", PARENT_TABLE="BillingAccount"
    CHILD_OWNER="", CHILD_TABLE="Account_BillingAccount"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_60", FK_COLUMNS="BAcctName""BAcctName2""BillingAddress1""BillingAddress2""BillingCity""
              BillingState""BillingZip" */
    IF EXISTS (SELECT * FROM deleted,BillingAccount
      WHERE
        /* %JoinFKPK(deleted,BillingAccount," = "," AND") */
        deleted.BAcctName = BillingAccount.BAcctName AND
        deleted.BAcctName2 = BillingAccount.BAcctName2 AND
        deleted.BillingAddress1 = BillingAccount.BillingAddress1 AND
        deleted.BillingAddress2 = BillingAccount.BillingAddress2 AND
        deleted.BillingCity = BillingAccount.BillingCity AND
        deleted.BillingState = BillingAccount.BillingState AND
        deleted.BillingZip = BillingAccount.BillingZip AND
        NOT EXISTS (
          SELECT * FROM Account_BillingAccount
          WHERE
            /* %JoinFKPK(Account_BillingAccount,BillingAccount," = "," AND") */
            Account_BillingAccount.BAcctName = BillingAccount.BAcctName AND
            Account_BillingAccount.BAcctName2 = BillingAccount.BAcctName2 AND
            Account_BillingAccount.BillingAddress1 = BillingAccount.BillingAddress1 AND
            Account_BillingAccount.BillingAddress2 = BillingAccount.BillingAddress2 AND
            Account_BillingAccount.BillingCity = BillingAccount.BillingCity AND
            Account_BillingAccount.BillingState = BillingAccount.BillingState AND
            Account_BillingAccount.BillingZip = BillingAccount.BillingZip
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Account_BillingAccount because BillingAccount exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Account  Account_BillingAccount on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Account_BillingAccount"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_59", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
    IF EXISTS (SELECT * FROM deleted,Account
      WHERE
        /* %JoinFKPK(deleted,Account," = "," AND") */
        deleted.AccountName = Account.AccountName AND
        deleted.AccountName2 = Account.AccountName2 AND
        deleted.LocationAddress1 = Account.LocationAddress1 AND
        deleted.LocationAddress2 = Account.LocationAddress2 AND
        deleted.LocationCity = Account.LocationCity AND
        deleted.LocationState = Account.LocationState AND
        deleted.LocationZip = Account.LocationZip AND
        deleted.CompanyCode = Account.CompanyCode AND
        NOT EXISTS (
          SELECT * FROM Account_BillingAccount
          WHERE
            /* %JoinFKPK(Account_BillingAccount,Account," = "," AND") */
            Account_BillingAccount.AccountName = Account.AccountName AND
            Account_BillingAccount.AccountName2 = Account.AccountName2 AND
            Account_BillingAccount.LocationAddress1 = Account.LocationAddress1 AND
            Account_BillingAccount.LocationAddress2 = Account.LocationAddress2 AND
            Account_BillingAccount.LocationCity = Account.LocationCity AND
            Account_BillingAccount.LocationState = Account.LocationState AND
            Account_BillingAccount.LocationZip = Account.LocationZip AND
            Account_BillingAccount.CompanyCode = Account.CompanyCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Account_BillingAccount because Account exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Account_BillingAccount ON Account_BillingAccount FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Account_BillingAccount */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAccountName varchar(30), 
           @insAccountName2 varchar(30), 
           @insLocationAddress1 varchar(30), 
           @insLocationAddress2 varchar(30), 
           @insLocationCity varchar(30), 
           @insLocationState varchar(30), 
           @insLocationZip varchar(30), 
           @insCompanyCode varchar(30), 
           @insBAcctName varchar(30), 
           @insBAcctName2 varchar(30), 
           @insBillingAddress1 varchar(30), 
           @insBillingAddress2 varchar(30), 
           @insBillingCity varchar(30), 
           @insBillingState varchar(30), 
           @insBillingZip varchar(30), 
           @insRelationshipType varchar(30), 
           @insStartDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BillingAccount  Account_BillingAccount on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00052c86", PARENT_OWNER="", PARENT_TABLE="BillingAccount"
    CHILD_OWNER="", CHILD_TABLE="Account_BillingAccount"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_60", FK_COLUMNS="BAcctName""BAcctName2""BillingAddress1""BillingAddress2""BillingCity""
              BillingState""BillingZip" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BAcctName) OR
    UPDATE(BAcctName2) OR
    UPDATE(BillingAddress1) OR
    UPDATE(BillingAddress2) OR
    UPDATE(BillingCity) OR
    UPDATE(BillingState) OR
    UPDATE(BillingZip)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BillingAccount
        WHERE
          /* %JoinFKPK(inserted,BillingAccount) */
          inserted.BAcctName = BillingAccount.BAcctName and
          inserted.BAcctName2 = BillingAccount.BAcctName2 and
          inserted.BillingAddress1 = BillingAccount.BillingAddress1 and
          inserted.BillingAddress2 = BillingAccount.BillingAddress2 and
          inserted.BillingCity = BillingAccount.BillingCity and
          inserted.BillingState = BillingAccount.BillingState and
          inserted.BillingZip = BillingAccount.BillingZip
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Account_BillingAccount because BillingAccount does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Account  Account_BillingAccount on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Account_BillingAccount"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_59", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AccountName) OR
    UPDATE(AccountName2) OR
    UPDATE(LocationAddress1) OR
    UPDATE(LocationAddress2) OR
    UPDATE(LocationCity) OR
    UPDATE(LocationState) OR
    UPDATE(LocationZip) OR
    UPDATE(CompanyCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Account
        WHERE
          /* %JoinFKPK(inserted,Account) */
          inserted.AccountName = Account.AccountName and
          inserted.AccountName2 = Account.AccountName2 and
          inserted.LocationAddress1 = Account.LocationAddress1 and
          inserted.LocationAddress2 = Account.LocationAddress2 and
          inserted.LocationCity = Account.LocationCity and
          inserted.LocationState = Account.LocationState and
          inserted.LocationZip = Account.LocationZip and
          inserted.CompanyCode = Account.CompanyCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Account_BillingAccount because Account does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Account_ProductPlan ON Account_ProductPlan FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Account_ProductPlan */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ProductPlan  Account_ProductPlan on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004c7cc", PARENT_OWNER="", PARENT_TABLE="ProductPlan"
    CHILD_OWNER="", CHILD_TABLE="Account_ProductPlan"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_64", FK_COLUMNS="LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (SELECT * FROM deleted,ProductPlan
      WHERE
        /* %JoinFKPK(deleted,ProductPlan," = "," AND") */
        deleted.LineOfBusiness = ProductPlan.LineOfBusiness AND
        deleted.SeriesName = ProductPlan.SeriesName AND
        deleted.PlanName = ProductPlan.PlanName AND
        NOT EXISTS (
          SELECT * FROM Account_ProductPlan
          WHERE
            /* %JoinFKPK(Account_ProductPlan,ProductPlan," = "," AND") */
            Account_ProductPlan.LineOfBusiness = ProductPlan.LineOfBusiness AND
            Account_ProductPlan.SeriesName = ProductPlan.SeriesName AND
            Account_ProductPlan.PlanName = ProductPlan.PlanName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Account_ProductPlan because ProductPlan exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Account  Account_ProductPlan on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Account_ProductPlan"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_63", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
    IF EXISTS (SELECT * FROM deleted,Account
      WHERE
        /* %JoinFKPK(deleted,Account," = "," AND") */
        deleted.AccountName = Account.AccountName AND
        deleted.AccountName2 = Account.AccountName2 AND
        deleted.LocationAddress1 = Account.LocationAddress1 AND
        deleted.LocationAddress2 = Account.LocationAddress2 AND
        deleted.LocationCity = Account.LocationCity AND
        deleted.LocationState = Account.LocationState AND
        deleted.LocationZip = Account.LocationZip AND
        deleted.CompanyCode = Account.CompanyCode AND
        NOT EXISTS (
          SELECT * FROM Account_ProductPlan
          WHERE
            /* %JoinFKPK(Account_ProductPlan,Account," = "," AND") */
            Account_ProductPlan.AccountName = Account.AccountName AND
            Account_ProductPlan.AccountName2 = Account.AccountName2 AND
            Account_ProductPlan.LocationAddress1 = Account.LocationAddress1 AND
            Account_ProductPlan.LocationAddress2 = Account.LocationAddress2 AND
            Account_ProductPlan.LocationCity = Account.LocationCity AND
            Account_ProductPlan.LocationState = Account.LocationState AND
            Account_ProductPlan.LocationZip = Account.LocationZip AND
            Account_ProductPlan.CompanyCode = Account.CompanyCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Account_ProductPlan because Account exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Account_ProductPlan ON Account_ProductPlan FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Account_ProductPlan */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAccountName varchar(30), 
           @insAccountName2 varchar(30), 
           @insLocationAddress1 varchar(30), 
           @insLocationAddress2 varchar(30), 
           @insLocationCity varchar(30), 
           @insLocationState varchar(30), 
           @insLocationZip varchar(30), 
           @insCompanyCode varchar(30), 
           @insLineOfBusiness varchar(30), 
           @insSeriesName varchar(30), 
           @insPlanName varchar(30), 
           @insStartDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ProductPlan  Account_ProductPlan on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000443e3", PARENT_OWNER="", PARENT_TABLE="ProductPlan"
    CHILD_OWNER="", CHILD_TABLE="Account_ProductPlan"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_64", FK_COLUMNS="LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ProductPlan
        WHERE
          /* %JoinFKPK(inserted,ProductPlan) */
          inserted.LineOfBusiness = ProductPlan.LineOfBusiness and
          inserted.SeriesName = ProductPlan.SeriesName and
          inserted.PlanName = ProductPlan.PlanName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Account_ProductPlan because ProductPlan does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Account  Account_ProductPlan on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Account_ProductPlan"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_63", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AccountName) OR
    UPDATE(AccountName2) OR
    UPDATE(LocationAddress1) OR
    UPDATE(LocationAddress2) OR
    UPDATE(LocationCity) OR
    UPDATE(LocationState) OR
    UPDATE(LocationZip) OR
    UPDATE(CompanyCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Account
        WHERE
          /* %JoinFKPK(inserted,Account) */
          inserted.AccountName = Account.AccountName and
          inserted.AccountName2 = Account.AccountName2 and
          inserted.LocationAddress1 = Account.LocationAddress1 and
          inserted.LocationAddress2 = Account.LocationAddress2 and
          inserted.LocationCity = Account.LocationCity and
          inserted.LocationState = Account.LocationState and
          inserted.LocationZip = Account.LocationZip and
          inserted.CompanyCode = Account.CompanyCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Account_ProductPlan because Account does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_AccountMember ON AccountMember FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on AccountMember */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Account  AccountMember on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004fafe", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="AccountMember"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_44", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
    IF EXISTS (SELECT * FROM deleted,Account
      WHERE
        /* %JoinFKPK(deleted,Account," = "," AND") */
        deleted.AccountName = Account.AccountName AND
        deleted.AccountName2 = Account.AccountName2 AND
        deleted.LocationAddress1 = Account.LocationAddress1 AND
        deleted.LocationAddress2 = Account.LocationAddress2 AND
        deleted.LocationCity = Account.LocationCity AND
        deleted.LocationState = Account.LocationState AND
        deleted.LocationZip = Account.LocationZip AND
        deleted.CompanyCode = Account.CompanyCode AND
        NOT EXISTS (
          SELECT * FROM AccountMember
          WHERE
            /* %JoinFKPK(AccountMember,Account," = "," AND") */
            AccountMember.AccountName = Account.AccountName AND
            AccountMember.AccountName2 = Account.AccountName2 AND
            AccountMember.LocationAddress1 = Account.LocationAddress1 AND
            AccountMember.LocationAddress2 = Account.LocationAddress2 AND
            AccountMember.LocationCity = Account.LocationCity AND
            AccountMember.LocationState = Account.LocationState AND
            AccountMember.LocationZip = Account.LocationZip AND
            AccountMember.CompanyCode = Account.CompanyCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last AccountMember because Account exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Customer  AccountMember on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="AccountMember"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_6", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
    IF EXISTS (SELECT * FROM deleted,Customer
      WHERE
        /* %JoinFKPK(deleted,Customer," = "," AND") */
        deleted.CustFirstName = Customer.CustFirstName AND
        deleted.CustMiddleInitial = Customer.CustMiddleInitial AND
        deleted.CustSuffix = Customer.CustSuffix AND
        deleted.CustDOB = Customer.CustDOB AND
        deleted.CustLastName = Customer.CustLastName AND
        NOT EXISTS (
          SELECT * FROM AccountMember
          WHERE
            /* %JoinFKPK(AccountMember,Customer," = "," AND") */
            AccountMember.CustFirstName = Customer.CustFirstName AND
            AccountMember.CustMiddleInitial = Customer.CustMiddleInitial AND
            AccountMember.CustSuffix = Customer.CustSuffix AND
            AccountMember.CustDOB = Customer.CustDOB AND
            AccountMember.CustLastName = Customer.CustLastName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last AccountMember because Customer exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_AccountMember ON AccountMember FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on AccountMember */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCustLastName varchar(30), 
           @insCustFirstName varchar(30), 
           @insCustMiddleInitial varchar(30), 
           @insCustSuffix varchar(30), 
           @insCustDOB datetime, 
           @insStartDate datetime, 
           @insAccountName varchar(30), 
           @insAccountName2 varchar(30), 
           @insLocationAddress1 varchar(30), 
           @insLocationAddress2 varchar(30), 
           @insLocationCity varchar(30), 
           @insLocationState varchar(30), 
           @insLocationZip varchar(30), 
           @insCompanyCode varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Account  AccountMember on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0004749a", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="AccountMember"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_44", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AccountName) OR
    UPDATE(AccountName2) OR
    UPDATE(LocationAddress1) OR
    UPDATE(LocationAddress2) OR
    UPDATE(LocationCity) OR
    UPDATE(LocationState) OR
    UPDATE(LocationZip) OR
    UPDATE(CompanyCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Account
        WHERE
          /* %JoinFKPK(inserted,Account) */
          inserted.AccountName = Account.AccountName and
          inserted.AccountName2 = Account.AccountName2 and
          inserted.LocationAddress1 = Account.LocationAddress1 and
          inserted.LocationAddress2 = Account.LocationAddress2 and
          inserted.LocationCity = Account.LocationCity and
          inserted.LocationState = Account.LocationState and
          inserted.LocationZip = Account.LocationZip and
          inserted.CompanyCode = Account.CompanyCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update AccountMember because Account does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Customer  AccountMember on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="AccountMember"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_6", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB) OR
    UPDATE(CustLastName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Customer
        WHERE
          /* %JoinFKPK(inserted,Customer) */
          inserted.CustFirstName = Customer.CustFirstName and
          inserted.CustMiddleInitial = Customer.CustMiddleInitial and
          inserted.CustSuffix = Customer.CustSuffix and
          inserted.CustDOB = Customer.CustDOB and
          inserted.CustLastName = Customer.CustLastName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update AccountMember because Customer does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Associate ON Associate FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Associate */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Associate  ManagerContract on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001a45d", PARENT_OWNER="", PARENT_TABLE="Associate"
    CHILD_OWNER="", CHILD_TABLE="ManagerContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_62", FK_COLUMNS="AssocLastName""AssocFirstName""AssocMiddleInitial""AssocSuffix""
              AssocDOB" */
    IF EXISTS (
      SELECT * FROM deleted,ManagerContract
      WHERE
        /*  %JoinFKPK(ManagerContract,deleted," = "," AND") */
        ManagerContract.AssocLastName = deleted.AssocLastName AND
        ManagerContract.AssocFirstName = deleted.AssocFirstName AND
        ManagerContract.AssocMiddleInitial = deleted.AssocMiddleInitial AND
        ManagerContract.AssocSuffix = deleted.AssocSuffix AND
        ManagerContract.AssocDOB = deleted.AssocDOB
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Associate because ManagerContract exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Associate ON Associate FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Associate */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAssocLastName varchar(30), 
           @insAssocFirstName varchar(30), 
           @insAssocMiddleInitial varchar(30), 
           @insAssocSuffix varchar(30), 
           @insAssocDOB datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Associate  ManagerContract on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00020755", PARENT_OWNER="", PARENT_TABLE="Associate"
    CHILD_OWNER="", CHILD_TABLE="ManagerContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_62", FK_COLUMNS="AssocLastName""AssocFirstName""AssocMiddleInitial""AssocSuffix""
              AssocDOB" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AssocLastName) OR
    UPDATE(AssocFirstName) OR
    UPDATE(AssocMiddleInitial) OR
    UPDATE(AssocSuffix) OR
    UPDATE(AssocDOB)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ManagerContract
      WHERE
        /*  %JoinFKPK(ManagerContract,deleted," = "," AND") */
        ManagerContract.AssocLastName = deleted.AssocLastName AND
        ManagerContract.AssocFirstName = deleted.AssocFirstName AND
        ManagerContract.AssocMiddleInitial = deleted.AssocMiddleInitial AND
        ManagerContract.AssocSuffix = deleted.AssocSuffix AND
        ManagerContract.AssocDOB = deleted.AssocDOB
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Associate because ManagerContract exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_BenefitPremiumPredictionModel ON BenefitPremiumPredictionModel FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BenefitPremiumPredictionModel */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BenefitPremiumPredictionModel  ContractBenefit on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00013d97", PARENT_OWNER="", PARENT_TABLE="BenefitPremiumPredictionModel"
    CHILD_OWNER="", CHILD_TABLE="ContractBenefit"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_79", FK_COLUMNS="BenefitName" */
    IF EXISTS (
      SELECT * FROM deleted,ContractBenefit
      WHERE
        /*  %JoinFKPK(ContractBenefit,deleted," = "," AND") */
        ContractBenefit.BenefitName = deleted.BenefitName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BenefitPremiumPredictionModel because ContractBenefit exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_BenefitPremiumPredictionModel ON BenefitPremiumPredictionModel FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BenefitPremiumPredictionModel */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBenefitName varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BenefitPremiumPredictionModel  ContractBenefit on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00014faa", PARENT_OWNER="", PARENT_TABLE="BenefitPremiumPredictionModel"
    CHILD_OWNER="", CHILD_TABLE="ContractBenefit"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_79", FK_COLUMNS="BenefitName" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BenefitName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ContractBenefit
      WHERE
        /*  %JoinFKPK(ContractBenefit,deleted," = "," AND") */
        ContractBenefit.BenefitName = deleted.BenefitName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BenefitPremiumPredictionModel because ContractBenefit exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_BillingAccount ON BillingAccount FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BillingAccount */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BillingAccount  Account_BillingAccount on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003a20f", PARENT_OWNER="", PARENT_TABLE="BillingAccount"
    CHILD_OWNER="", CHILD_TABLE="Account_BillingAccount"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_60", FK_COLUMNS="BAcctName""BAcctName2""BillingAddress1""BillingAddress2""BillingCity""
              BillingState""BillingZip" */
    IF EXISTS (
      SELECT * FROM deleted,Account_BillingAccount
      WHERE
        /*  %JoinFKPK(Account_BillingAccount,deleted," = "," AND") */
        Account_BillingAccount.BAcctName = deleted.BAcctName AND
        Account_BillingAccount.BAcctName2 = deleted.BAcctName2 AND
        Account_BillingAccount.BillingAddress1 = deleted.BillingAddress1 AND
        Account_BillingAccount.BillingAddress2 = deleted.BillingAddress2 AND
        Account_BillingAccount.BillingCity = deleted.BillingCity AND
        Account_BillingAccount.BillingState = deleted.BillingState AND
        Account_BillingAccount.BillingZip = deleted.BillingZip
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BillingAccount because Account_BillingAccount exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BillingAccount  Invoice on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BillingAccount"
    CHILD_OWNER="", CHILD_TABLE="Invoice"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_58", FK_COLUMNS="BAcctName""BAcctName2""BillingAddress1""BillingAddress2""BillingCity""
              BillingState""BillingZip" */
    IF EXISTS (
      SELECT * FROM deleted,Invoice
      WHERE
        /*  %JoinFKPK(Invoice,deleted," = "," AND") */
        Invoice.BAcctName = deleted.BAcctName AND
        Invoice.BAcctName2 = deleted.BAcctName2 AND
        Invoice.BillingAddress1 = deleted.BillingAddress1 AND
        Invoice.BillingAddress2 = deleted.BillingAddress2 AND
        Invoice.BillingCity = deleted.BillingCity AND
        Invoice.BillingState = deleted.BillingState AND
        Invoice.BillingZip = deleted.BillingZip
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BillingAccount because Invoice exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_BillingAccount ON BillingAccount FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BillingAccount */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBAcctName varchar(30), 
           @insBAcctName2 varchar(30), 
           @insBillingAddress1 varchar(30), 
           @insBillingAddress2 varchar(30), 
           @insBillingCity varchar(30), 
           @insBillingState varchar(30), 
           @insBillingZip varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BillingAccount  Account_BillingAccount on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00046766", PARENT_OWNER="", PARENT_TABLE="BillingAccount"
    CHILD_OWNER="", CHILD_TABLE="Account_BillingAccount"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_60", FK_COLUMNS="BAcctName""BAcctName2""BillingAddress1""BillingAddress2""BillingCity""
              BillingState""BillingZip" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BAcctName) OR
    UPDATE(BAcctName2) OR
    UPDATE(BillingAddress1) OR
    UPDATE(BillingAddress2) OR
    UPDATE(BillingCity) OR
    UPDATE(BillingState) OR
    UPDATE(BillingZip)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Account_BillingAccount
      WHERE
        /*  %JoinFKPK(Account_BillingAccount,deleted," = "," AND") */
        Account_BillingAccount.BAcctName = deleted.BAcctName AND
        Account_BillingAccount.BAcctName2 = deleted.BAcctName2 AND
        Account_BillingAccount.BillingAddress1 = deleted.BillingAddress1 AND
        Account_BillingAccount.BillingAddress2 = deleted.BillingAddress2 AND
        Account_BillingAccount.BillingCity = deleted.BillingCity AND
        Account_BillingAccount.BillingState = deleted.BillingState AND
        Account_BillingAccount.BillingZip = deleted.BillingZip
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BillingAccount because Account_BillingAccount exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BillingAccount  Invoice on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BillingAccount"
    CHILD_OWNER="", CHILD_TABLE="Invoice"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_58", FK_COLUMNS="BAcctName""BAcctName2""BillingAddress1""BillingAddress2""BillingCity""
              BillingState""BillingZip" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BAcctName) OR
    UPDATE(BAcctName2) OR
    UPDATE(BillingAddress1) OR
    UPDATE(BillingAddress2) OR
    UPDATE(BillingCity) OR
    UPDATE(BillingState) OR
    UPDATE(BillingZip)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Invoice
      WHERE
        /*  %JoinFKPK(Invoice,deleted," = "," AND") */
        Invoice.BAcctName = deleted.BAcctName AND
        Invoice.BAcctName2 = deleted.BAcctName2 AND
        Invoice.BillingAddress1 = deleted.BillingAddress1 AND
        Invoice.BillingAddress2 = deleted.BillingAddress2 AND
        Invoice.BillingCity = deleted.BillingCity AND
        Invoice.BillingState = deleted.BillingState AND
        Invoice.BillingZip = deleted.BillingZip
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BillingAccount because Invoice exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Claim ON Claim FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Claim */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Claim  ClaimEvent on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0007c46c", PARENT_OWNER="", PARENT_TABLE="Claim"
    CHILD_OWNER="", CHILD_TABLE="ClaimEvent"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_55", FK_COLUMNS="ClaimNumber""ContractNumber""LineOfBusiness""SeriesName""PlanName""
              CustLastName""CustFirstName""CustMiddleInitial""
              CustSuffix""CustDOB" */
    IF EXISTS (
      SELECT * FROM deleted,ClaimEvent
      WHERE
        /*  %JoinFKPK(ClaimEvent,deleted," = "," AND") */
        ClaimEvent.ClaimNumber = deleted.ClaimNumber AND
        ClaimEvent.ContractNumber = deleted.ContractNumber AND
        ClaimEvent.LineOfBusiness = deleted.LineOfBusiness AND
        ClaimEvent.SeriesName = deleted.SeriesName AND
        ClaimEvent.PlanName = deleted.PlanName AND
        ClaimEvent.CustLastName = deleted.CustLastName AND
        ClaimEvent.CustFirstName = deleted.CustFirstName AND
        ClaimEvent.CustMiddleInitial = deleted.CustMiddleInitial AND
        ClaimEvent.CustSuffix = deleted.CustSuffix AND
        ClaimEvent.CustDOB = deleted.CustDOB
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Claim because ClaimEvent exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Claim  ClaimImage on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Claim"
    CHILD_OWNER="", CHILD_TABLE="ClaimImage"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_16", FK_COLUMNS="ClaimNumber""ContractNumber""LineOfBusiness""SeriesName""PlanName""
              CustLastName""CustFirstName""CustMiddleInitial""
              CustSuffix""CustDOB" */
    IF EXISTS (
      SELECT * FROM deleted,ClaimImage
      WHERE
        /*  %JoinFKPK(ClaimImage,deleted," = "," AND") */
        ClaimImage.ClaimNumber = deleted.ClaimNumber AND
        ClaimImage.ContractNumber = deleted.ContractNumber AND
        ClaimImage.LineOfBusiness = deleted.LineOfBusiness AND
        ClaimImage.SeriesName = deleted.SeriesName AND
        ClaimImage.PlanName = deleted.PlanName AND
        ClaimImage.CustLastName = deleted.CustLastName AND
        ClaimImage.CustFirstName = deleted.CustFirstName AND
        ClaimImage.CustMiddleInitial = deleted.CustMiddleInitial AND
        ClaimImage.CustSuffix = deleted.CustSuffix AND
        ClaimImage.CustDOB = deleted.CustDOB
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Claim because ClaimImage exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Customer  Claim on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="Claim"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_67", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
    IF EXISTS (SELECT * FROM deleted,Customer
      WHERE
        /* %JoinFKPK(deleted,Customer," = "," AND") */
        deleted.CustFirstName = Customer.CustFirstName AND
        deleted.CustMiddleInitial = Customer.CustMiddleInitial AND
        deleted.CustSuffix = Customer.CustSuffix AND
        deleted.CustDOB = Customer.CustDOB AND
        deleted.CustLastName = Customer.CustLastName AND
        NOT EXISTS (
          SELECT * FROM Claim
          WHERE
            /* %JoinFKPK(Claim,Customer," = "," AND") */
            Claim.CustFirstName = Customer.CustFirstName AND
            Claim.CustMiddleInitial = Customer.CustMiddleInitial AND
            Claim.CustSuffix = Customer.CustSuffix AND
            Claim.CustDOB = Customer.CustDOB AND
            Claim.CustLastName = Customer.CustLastName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Claim because Customer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Contract  Claim on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="Claim"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_54", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (SELECT * FROM deleted,Contract
      WHERE
        /* %JoinFKPK(deleted,Contract," = "," AND") */
        deleted.ContractNumber = Contract.ContractNumber AND
        deleted.LineOfBusiness = Contract.LineOfBusiness AND
        deleted.SeriesName = Contract.SeriesName AND
        deleted.PlanName = Contract.PlanName AND
        NOT EXISTS (
          SELECT * FROM Claim
          WHERE
            /* %JoinFKPK(Claim,Contract," = "," AND") */
            Claim.ContractNumber = Contract.ContractNumber AND
            Claim.LineOfBusiness = Contract.LineOfBusiness AND
            Claim.SeriesName = Contract.SeriesName AND
            Claim.PlanName = Contract.PlanName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Claim because Contract exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Claim ON Claim FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Claim */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insClaimNumber integer, 
           @insContractNumber varchar(30), 
           @insLineOfBusiness varchar(30), 
           @insSeriesName varchar(30), 
           @insPlanName varchar(30), 
           @insCustLastName varchar(30), 
           @insCustFirstName varchar(30), 
           @insCustMiddleInitial varchar(30), 
           @insCustSuffix varchar(30), 
           @insCustDOB datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Claim  ClaimEvent on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0008bec1", PARENT_OWNER="", PARENT_TABLE="Claim"
    CHILD_OWNER="", CHILD_TABLE="ClaimEvent"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_55", FK_COLUMNS="ClaimNumber""ContractNumber""LineOfBusiness""SeriesName""PlanName""
              CustLastName""CustFirstName""CustMiddleInitial""
              CustSuffix""CustDOB" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ClaimNumber) OR
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName) OR
    UPDATE(CustLastName) OR
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ClaimEvent
      WHERE
        /*  %JoinFKPK(ClaimEvent,deleted," = "," AND") */
        ClaimEvent.ClaimNumber = deleted.ClaimNumber AND
        ClaimEvent.ContractNumber = deleted.ContractNumber AND
        ClaimEvent.LineOfBusiness = deleted.LineOfBusiness AND
        ClaimEvent.SeriesName = deleted.SeriesName AND
        ClaimEvent.PlanName = deleted.PlanName AND
        ClaimEvent.CustLastName = deleted.CustLastName AND
        ClaimEvent.CustFirstName = deleted.CustFirstName AND
        ClaimEvent.CustMiddleInitial = deleted.CustMiddleInitial AND
        ClaimEvent.CustSuffix = deleted.CustSuffix AND
        ClaimEvent.CustDOB = deleted.CustDOB
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Claim because ClaimEvent exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Claim  ClaimImage on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Claim"
    CHILD_OWNER="", CHILD_TABLE="ClaimImage"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_16", FK_COLUMNS="ClaimNumber""ContractNumber""LineOfBusiness""SeriesName""PlanName""
              CustLastName""CustFirstName""CustMiddleInitial""
              CustSuffix""CustDOB" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ClaimNumber) OR
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName) OR
    UPDATE(CustLastName) OR
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ClaimImage
      WHERE
        /*  %JoinFKPK(ClaimImage,deleted," = "," AND") */
        ClaimImage.ClaimNumber = deleted.ClaimNumber AND
        ClaimImage.ContractNumber = deleted.ContractNumber AND
        ClaimImage.LineOfBusiness = deleted.LineOfBusiness AND
        ClaimImage.SeriesName = deleted.SeriesName AND
        ClaimImage.PlanName = deleted.PlanName AND
        ClaimImage.CustLastName = deleted.CustLastName AND
        ClaimImage.CustFirstName = deleted.CustFirstName AND
        ClaimImage.CustMiddleInitial = deleted.CustMiddleInitial AND
        ClaimImage.CustSuffix = deleted.CustSuffix AND
        ClaimImage.CustDOB = deleted.CustDOB
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Claim because ClaimImage exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Customer  Claim on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="Claim"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_67", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB) OR
    UPDATE(CustLastName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Customer
        WHERE
          /* %JoinFKPK(inserted,Customer) */
          inserted.CustFirstName = Customer.CustFirstName and
          inserted.CustMiddleInitial = Customer.CustMiddleInitial and
          inserted.CustSuffix = Customer.CustSuffix and
          inserted.CustDOB = Customer.CustDOB and
          inserted.CustLastName = Customer.CustLastName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Claim because Customer does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Contract  Claim on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="Claim"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_54", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Contract
        WHERE
          /* %JoinFKPK(inserted,Contract) */
          inserted.ContractNumber = Contract.ContractNumber and
          inserted.LineOfBusiness = Contract.LineOfBusiness and
          inserted.SeriesName = Contract.SeriesName and
          inserted.PlanName = Contract.PlanName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Claim because Contract does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ClaimEvent ON ClaimEvent FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ClaimEvent */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Claim  ClaimEvent on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0005a403", PARENT_OWNER="", PARENT_TABLE="Claim"
    CHILD_OWNER="", CHILD_TABLE="ClaimEvent"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_55", FK_COLUMNS="ClaimNumber""ContractNumber""LineOfBusiness""SeriesName""PlanName""
              CustLastName""CustFirstName""CustMiddleInitial""
              CustSuffix""CustDOB" */
    IF EXISTS (SELECT * FROM deleted,Claim
      WHERE
        /* %JoinFKPK(deleted,Claim," = "," AND") */
        deleted.ClaimNumber = Claim.ClaimNumber AND
        deleted.ContractNumber = Claim.ContractNumber AND
        deleted.LineOfBusiness = Claim.LineOfBusiness AND
        deleted.SeriesName = Claim.SeriesName AND
        deleted.PlanName = Claim.PlanName AND
        deleted.CustLastName = Claim.CustLastName AND
        deleted.CustFirstName = Claim.CustFirstName AND
        deleted.CustMiddleInitial = Claim.CustMiddleInitial AND
        deleted.CustSuffix = Claim.CustSuffix AND
        deleted.CustDOB = Claim.CustDOB AND
        NOT EXISTS (
          SELECT * FROM ClaimEvent
          WHERE
            /* %JoinFKPK(ClaimEvent,Claim," = "," AND") */
            ClaimEvent.ClaimNumber = Claim.ClaimNumber AND
            ClaimEvent.ContractNumber = Claim.ContractNumber AND
            ClaimEvent.LineOfBusiness = Claim.LineOfBusiness AND
            ClaimEvent.SeriesName = Claim.SeriesName AND
            ClaimEvent.PlanName = Claim.PlanName AND
            ClaimEvent.CustLastName = Claim.CustLastName AND
            ClaimEvent.CustFirstName = Claim.CustFirstName AND
            ClaimEvent.CustMiddleInitial = Claim.CustMiddleInitial AND
            ClaimEvent.CustSuffix = Claim.CustSuffix AND
            ClaimEvent.CustDOB = Claim.CustDOB
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ClaimEvent because Claim exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* FinancialInstitution  ClaimEvent on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FinancialInstitution"
    CHILD_OWNER="", CHILD_TABLE="ClaimEvent"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_20", FK_COLUMNS="FIName""FIAddress1""FIAddress2""FINCity""FINState""FINZip""FIPhone" */
    IF EXISTS (SELECT * FROM deleted,FinancialInstitution
      WHERE
        /* %JoinFKPK(deleted,FinancialInstitution," = "," AND") */
        deleted.FIName = FinancialInstitution.FIName AND
        deleted.FIAddress1 = FinancialInstitution.FIAddress1 AND
        deleted.FIAddress2 = FinancialInstitution.FIAddress2 AND
        deleted.FINCity = FinancialInstitution.FINCity AND
        deleted.FINState = FinancialInstitution.FINState AND
        deleted.FINZip = FinancialInstitution.FINZip AND
        deleted.FIPhone = FinancialInstitution.FIPhone AND
        NOT EXISTS (
          SELECT * FROM ClaimEvent
          WHERE
            /* %JoinFKPK(ClaimEvent,FinancialInstitution," = "," AND") */
            ClaimEvent.FIName = FinancialInstitution.FIName AND
            ClaimEvent.FIAddress1 = FinancialInstitution.FIAddress1 AND
            ClaimEvent.FIAddress2 = FinancialInstitution.FIAddress2 AND
            ClaimEvent.FINCity = FinancialInstitution.FINCity AND
            ClaimEvent.FINState = FinancialInstitution.FINState AND
            ClaimEvent.FINZip = FinancialInstitution.FINZip AND
            ClaimEvent.FIPhone = FinancialInstitution.FIPhone
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ClaimEvent because FinancialInstitution exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ClaimEvent ON ClaimEvent FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ClaimEvent */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insFIName varchar(30), 
           @insFIAddress1 varchar(30), 
           @insFIAddress2 varchar(30), 
           @insFINCity varchar(30), 
           @insFINState varchar(30), 
           @insFINZip varchar(30), 
           @insFIPhone varchar(30), 
           @insClaimNumber integer, 
           @insContractNumber varchar(30), 
           @insLineOfBusiness varchar(30), 
           @insSeriesName varchar(30), 
           @insPlanName varchar(30), 
           @insCustLastName varchar(30), 
           @insCustFirstName varchar(30), 
           @insCustMiddleInitial varchar(30), 
           @insCustSuffix varchar(30), 
           @insCustDOB datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Claim  ClaimEvent on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00050a5c", PARENT_OWNER="", PARENT_TABLE="Claim"
    CHILD_OWNER="", CHILD_TABLE="ClaimEvent"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_55", FK_COLUMNS="ClaimNumber""ContractNumber""LineOfBusiness""SeriesName""PlanName""
              CustLastName""CustFirstName""CustMiddleInitial""
              CustSuffix""CustDOB" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ClaimNumber) OR
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName) OR
    UPDATE(CustLastName) OR
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Claim
        WHERE
          /* %JoinFKPK(inserted,Claim) */
          inserted.ClaimNumber = Claim.ClaimNumber and
          inserted.ContractNumber = Claim.ContractNumber and
          inserted.LineOfBusiness = Claim.LineOfBusiness and
          inserted.SeriesName = Claim.SeriesName and
          inserted.PlanName = Claim.PlanName and
          inserted.CustLastName = Claim.CustLastName and
          inserted.CustFirstName = Claim.CustFirstName and
          inserted.CustMiddleInitial = Claim.CustMiddleInitial and
          inserted.CustSuffix = Claim.CustSuffix and
          inserted.CustDOB = Claim.CustDOB
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ClaimEvent because Claim does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* FinancialInstitution  ClaimEvent on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FinancialInstitution"
    CHILD_OWNER="", CHILD_TABLE="ClaimEvent"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_20", FK_COLUMNS="FIName""FIAddress1""FIAddress2""FINCity""FINState""FINZip""FIPhone" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(FIName) OR
    UPDATE(FIAddress1) OR
    UPDATE(FIAddress2) OR
    UPDATE(FINCity) OR
    UPDATE(FINState) OR
    UPDATE(FINZip) OR
    UPDATE(FIPhone)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,FinancialInstitution
        WHERE
          /* %JoinFKPK(inserted,FinancialInstitution) */
          inserted.FIName = FinancialInstitution.FIName and
          inserted.FIAddress1 = FinancialInstitution.FIAddress1 and
          inserted.FIAddress2 = FinancialInstitution.FIAddress2 and
          inserted.FINCity = FinancialInstitution.FINCity and
          inserted.FINState = FinancialInstitution.FINState and
          inserted.FINZip = FinancialInstitution.FINZip and
          inserted.FIPhone = FinancialInstitution.FIPhone
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ClaimEvent because FinancialInstitution does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ClaimImage ON ClaimImage FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ClaimImage */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Claim  ClaimImage on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003085e", PARENT_OWNER="", PARENT_TABLE="Claim"
    CHILD_OWNER="", CHILD_TABLE="ClaimImage"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_16", FK_COLUMNS="ClaimNumber""ContractNumber""LineOfBusiness""SeriesName""PlanName""
              CustLastName""CustFirstName""CustMiddleInitial""
              CustSuffix""CustDOB" */
    IF EXISTS (SELECT * FROM deleted,Claim
      WHERE
        /* %JoinFKPK(deleted,Claim," = "," AND") */
        deleted.ClaimNumber = Claim.ClaimNumber AND
        deleted.ContractNumber = Claim.ContractNumber AND
        deleted.LineOfBusiness = Claim.LineOfBusiness AND
        deleted.SeriesName = Claim.SeriesName AND
        deleted.PlanName = Claim.PlanName AND
        deleted.CustLastName = Claim.CustLastName AND
        deleted.CustFirstName = Claim.CustFirstName AND
        deleted.CustMiddleInitial = Claim.CustMiddleInitial AND
        deleted.CustSuffix = Claim.CustSuffix AND
        deleted.CustDOB = Claim.CustDOB AND
        NOT EXISTS (
          SELECT * FROM ClaimImage
          WHERE
            /* %JoinFKPK(ClaimImage,Claim," = "," AND") */
            ClaimImage.ClaimNumber = Claim.ClaimNumber AND
            ClaimImage.ContractNumber = Claim.ContractNumber AND
            ClaimImage.LineOfBusiness = Claim.LineOfBusiness AND
            ClaimImage.SeriesName = Claim.SeriesName AND
            ClaimImage.PlanName = Claim.PlanName AND
            ClaimImage.CustLastName = Claim.CustLastName AND
            ClaimImage.CustFirstName = Claim.CustFirstName AND
            ClaimImage.CustMiddleInitial = Claim.CustMiddleInitial AND
            ClaimImage.CustSuffix = Claim.CustSuffix AND
            ClaimImage.CustDOB = Claim.CustDOB
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ClaimImage because Claim exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ClaimImage ON ClaimImage FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ClaimImage */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insClaimNumber integer, 
           @insDocumentId integer, 
           @insContractNumber varchar(30), 
           @insLineOfBusiness varchar(30), 
           @insSeriesName varchar(30), 
           @insPlanName varchar(30), 
           @insCustLastName varchar(30), 
           @insCustFirstName varchar(30), 
           @insCustMiddleInitial varchar(30), 
           @insCustSuffix varchar(30), 
           @insCustDOB datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Claim  ClaimImage on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0002d5d9", PARENT_OWNER="", PARENT_TABLE="Claim"
    CHILD_OWNER="", CHILD_TABLE="ClaimImage"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_16", FK_COLUMNS="ClaimNumber""ContractNumber""LineOfBusiness""SeriesName""PlanName""
              CustLastName""CustFirstName""CustMiddleInitial""
              CustSuffix""CustDOB" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ClaimNumber) OR
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName) OR
    UPDATE(CustLastName) OR
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Claim
        WHERE
          /* %JoinFKPK(inserted,Claim) */
          inserted.ClaimNumber = Claim.ClaimNumber and
          inserted.ContractNumber = Claim.ContractNumber and
          inserted.LineOfBusiness = Claim.LineOfBusiness and
          inserted.SeriesName = Claim.SeriesName and
          inserted.PlanName = Claim.PlanName and
          inserted.CustLastName = Claim.CustLastName and
          inserted.CustFirstName = Claim.CustFirstName and
          inserted.CustMiddleInitial = Claim.CustMiddleInitial and
          inserted.CustSuffix = Claim.CustSuffix and
          inserted.CustDOB = Claim.CustDOB
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ClaimImage because Claim does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Contract ON Contract FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Contract */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Contract  Invoice on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000ac883", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="Invoice"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_57", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (
      SELECT * FROM deleted,Invoice
      WHERE
        /*  %JoinFKPK(Invoice,deleted," = "," AND") */
        Invoice.ContractNumber = deleted.ContractNumber AND
        Invoice.LineOfBusiness = deleted.LineOfBusiness AND
        Invoice.SeriesName = deleted.SeriesName AND
        Invoice.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Contract because Invoice exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Contract  Claim on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="Claim"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_54", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (
      SELECT * FROM deleted,Claim
      WHERE
        /*  %JoinFKPK(Claim,deleted," = "," AND") */
        Claim.ContractNumber = deleted.ContractNumber AND
        Claim.LineOfBusiness = deleted.LineOfBusiness AND
        Claim.SeriesName = deleted.SeriesName AND
        Claim.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Contract because Claim exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Contract  ContractBenefit on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="ContractBenefit"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (
      SELECT * FROM deleted,ContractBenefit
      WHERE
        /*  %JoinFKPK(ContractBenefit,deleted," = "," AND") */
        ContractBenefit.ContractNumber = deleted.ContractNumber AND
        ContractBenefit.LineOfBusiness = deleted.LineOfBusiness AND
        ContractBenefit.SeriesName = deleted.SeriesName AND
        ContractBenefit.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Contract because ContractBenefit exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Contract  Remittance on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="Remittance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (
      SELECT * FROM deleted,Remittance
      WHERE
        /*  %JoinFKPK(Remittance,deleted," = "," AND") */
        Remittance.ContractNumber = deleted.ContractNumber AND
        Remittance.LineOfBusiness = deleted.LineOfBusiness AND
        Remittance.SeriesName = deleted.SeriesName AND
        Remittance.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Contract because Remittance exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Contract  ContractingParty on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="ContractingParty"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_35", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (
      SELECT * FROM deleted,ContractingParty
      WHERE
        /*  %JoinFKPK(ContractingParty,deleted," = "," AND") */
        ContractingParty.ContractNumber = deleted.ContractNumber AND
        ContractingParty.LineOfBusiness = deleted.LineOfBusiness AND
        ContractingParty.SeriesName = deleted.SeriesName AND
        ContractingParty.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Contract because ContractingParty exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Account  Contract on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Contract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_80", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
    IF EXISTS (SELECT * FROM deleted,Account
      WHERE
        /* %JoinFKPK(deleted,Account," = "," AND") */
        deleted.AccountName = Account.AccountName AND
        deleted.AccountName2 = Account.AccountName2 AND
        deleted.LocationAddress1 = Account.LocationAddress1 AND
        deleted.LocationAddress2 = Account.LocationAddress2 AND
        deleted.LocationCity = Account.LocationCity AND
        deleted.LocationState = Account.LocationState AND
        deleted.LocationZip = Account.LocationZip AND
        deleted.CompanyCode = Account.CompanyCode AND
        NOT EXISTS (
          SELECT * FROM Contract
          WHERE
            /* %JoinFKPK(Contract,Account," = "," AND") */
            Contract.AccountName = Account.AccountName AND
            Contract.AccountName2 = Account.AccountName2 AND
            Contract.LocationAddress1 = Account.LocationAddress1 AND
            Contract.LocationAddress2 = Account.LocationAddress2 AND
            Contract.LocationCity = Account.LocationCity AND
            Contract.LocationState = Account.LocationState AND
            Contract.LocationZip = Account.LocationZip AND
            Contract.CompanyCode = Account.CompanyCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Contract because Account exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ProductPlan  Contract on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductPlan"
    CHILD_OWNER="", CHILD_TABLE="Contract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_66", FK_COLUMNS="LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (SELECT * FROM deleted,ProductPlan
      WHERE
        /* %JoinFKPK(deleted,ProductPlan," = "," AND") */
        deleted.LineOfBusiness = ProductPlan.LineOfBusiness AND
        deleted.SeriesName = ProductPlan.SeriesName AND
        deleted.PlanName = ProductPlan.PlanName AND
        NOT EXISTS (
          SELECT * FROM Contract
          WHERE
            /* %JoinFKPK(Contract,ProductPlan," = "," AND") */
            Contract.LineOfBusiness = ProductPlan.LineOfBusiness AND
            Contract.SeriesName = ProductPlan.SeriesName AND
            Contract.PlanName = ProductPlan.PlanName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Contract because ProductPlan exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Contract ON Contract FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Contract */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insContractNumber varchar(30), 
           @insLineOfBusiness varchar(30), 
           @insSeriesName varchar(30), 
           @insPlanName varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Contract  Invoice on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000c6c2c", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="Invoice"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_57", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Invoice
      WHERE
        /*  %JoinFKPK(Invoice,deleted," = "," AND") */
        Invoice.ContractNumber = deleted.ContractNumber AND
        Invoice.LineOfBusiness = deleted.LineOfBusiness AND
        Invoice.SeriesName = deleted.SeriesName AND
        Invoice.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Contract because Invoice exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Contract  Claim on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="Claim"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_54", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Claim
      WHERE
        /*  %JoinFKPK(Claim,deleted," = "," AND") */
        Claim.ContractNumber = deleted.ContractNumber AND
        Claim.LineOfBusiness = deleted.LineOfBusiness AND
        Claim.SeriesName = deleted.SeriesName AND
        Claim.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Contract because Claim exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Contract  ContractBenefit on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="ContractBenefit"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ContractBenefit
      WHERE
        /*  %JoinFKPK(ContractBenefit,deleted," = "," AND") */
        ContractBenefit.ContractNumber = deleted.ContractNumber AND
        ContractBenefit.LineOfBusiness = deleted.LineOfBusiness AND
        ContractBenefit.SeriesName = deleted.SeriesName AND
        ContractBenefit.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Contract because ContractBenefit exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Contract  Remittance on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="Remittance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Remittance
      WHERE
        /*  %JoinFKPK(Remittance,deleted," = "," AND") */
        Remittance.ContractNumber = deleted.ContractNumber AND
        Remittance.LineOfBusiness = deleted.LineOfBusiness AND
        Remittance.SeriesName = deleted.SeriesName AND
        Remittance.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Contract because Remittance exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Contract  ContractingParty on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="ContractingParty"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_35", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ContractingParty
      WHERE
        /*  %JoinFKPK(ContractingParty,deleted," = "," AND") */
        ContractingParty.ContractNumber = deleted.ContractNumber AND
        ContractingParty.LineOfBusiness = deleted.LineOfBusiness AND
        ContractingParty.SeriesName = deleted.SeriesName AND
        ContractingParty.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Contract because ContractingParty exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Account  Contract on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Account"
    CHILD_OWNER="", CHILD_TABLE="Contract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_80", FK_COLUMNS="AccountName""AccountName2""LocationAddress1""LocationAddress2""
              LocationCity""LocationState""LocationZip""CompanyCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AccountName) OR
    UPDATE(AccountName2) OR
    UPDATE(LocationAddress1) OR
    UPDATE(LocationAddress2) OR
    UPDATE(LocationCity) OR
    UPDATE(LocationState) OR
    UPDATE(LocationZip) OR
    UPDATE(CompanyCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Account
        WHERE
          /* %JoinFKPK(inserted,Account) */
          inserted.AccountName = Account.AccountName and
          inserted.AccountName2 = Account.AccountName2 and
          inserted.LocationAddress1 = Account.LocationAddress1 and
          inserted.LocationAddress2 = Account.LocationAddress2 and
          inserted.LocationCity = Account.LocationCity and
          inserted.LocationState = Account.LocationState and
          inserted.LocationZip = Account.LocationZip and
          inserted.CompanyCode = Account.CompanyCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.AccountName IS NULL AND
      inserted.AccountName2 IS NULL AND
      inserted.LocationAddress1 IS NULL AND
      inserted.LocationAddress2 IS NULL AND
      inserted.LocationCity IS NULL AND
      inserted.LocationState IS NULL AND
      inserted.LocationZip IS NULL AND
      inserted.CompanyCode IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Contract because Account does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ProductPlan  Contract on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductPlan"
    CHILD_OWNER="", CHILD_TABLE="Contract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_66", FK_COLUMNS="LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ProductPlan
        WHERE
          /* %JoinFKPK(inserted,ProductPlan) */
          inserted.LineOfBusiness = ProductPlan.LineOfBusiness and
          inserted.SeriesName = ProductPlan.SeriesName and
          inserted.PlanName = ProductPlan.PlanName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Contract because ProductPlan does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ContractBenefit ON ContractBenefit FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ContractBenefit */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ContractBenefit  ContractPremium on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0006cf41", PARENT_OWNER="", PARENT_TABLE="ContractBenefit"
    CHILD_OWNER="", CHILD_TABLE="ContractPremium"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_48", FK_COLUMNS="PlanName""LineOfBusiness""SeriesName""ContractNumber""BenefitName" */
    IF EXISTS (
      SELECT * FROM deleted,ContractPremium
      WHERE
        /*  %JoinFKPK(ContractPremium,deleted," = "," AND") */
        ContractPremium.ContractNumber = deleted.ContractNumber AND
        ContractPremium.LineOfBusiness = deleted.LineOfBusiness AND
        ContractPremium.SeriesName = deleted.SeriesName AND
        ContractPremium.PlanName = deleted.PlanName AND
        ContractPremium.BenefitName = deleted.BenefitName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ContractBenefit because ContractPremium exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BenefitPremiumPredictionModel  ContractBenefit on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BenefitPremiumPredictionModel"
    CHILD_OWNER="", CHILD_TABLE="ContractBenefit"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_79", FK_COLUMNS="BenefitName" */
    IF EXISTS (SELECT * FROM deleted,BenefitPremiumPredictionModel
      WHERE
        /* %JoinFKPK(deleted,BenefitPremiumPredictionModel," = "," AND") */
        deleted.BenefitName = BenefitPremiumPredictionModel.BenefitName AND
        NOT EXISTS (
          SELECT * FROM ContractBenefit
          WHERE
            /* %JoinFKPK(ContractBenefit,BenefitPremiumPredictionModel," = "," AND") */
            ContractBenefit.BenefitName = BenefitPremiumPredictionModel.BenefitName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ContractBenefit because BenefitPremiumPredictionModel exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ProductPlan  ContractBenefit on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductPlan"
    CHILD_OWNER="", CHILD_TABLE="ContractBenefit"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_65", FK_COLUMNS="LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (SELECT * FROM deleted,ProductPlan
      WHERE
        /* %JoinFKPK(deleted,ProductPlan," = "," AND") */
        deleted.LineOfBusiness = ProductPlan.LineOfBusiness AND
        deleted.SeriesName = ProductPlan.SeriesName AND
        deleted.PlanName = ProductPlan.PlanName AND
        NOT EXISTS (
          SELECT * FROM ContractBenefit
          WHERE
            /* %JoinFKPK(ContractBenefit,ProductPlan," = "," AND") */
            ContractBenefit.LineOfBusiness = ProductPlan.LineOfBusiness AND
            ContractBenefit.SeriesName = ProductPlan.SeriesName AND
            ContractBenefit.PlanName = ProductPlan.PlanName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ContractBenefit because ProductPlan exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Contract  ContractBenefit on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="ContractBenefit"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (SELECT * FROM deleted,Contract
      WHERE
        /* %JoinFKPK(deleted,Contract," = "," AND") */
        deleted.ContractNumber = Contract.ContractNumber AND
        deleted.LineOfBusiness = Contract.LineOfBusiness AND
        deleted.SeriesName = Contract.SeriesName AND
        deleted.PlanName = Contract.PlanName AND
        NOT EXISTS (
          SELECT * FROM ContractBenefit
          WHERE
            /* %JoinFKPK(ContractBenefit,Contract," = "," AND") */
            ContractBenefit.ContractNumber = Contract.ContractNumber AND
            ContractBenefit.LineOfBusiness = Contract.LineOfBusiness AND
            ContractBenefit.SeriesName = Contract.SeriesName AND
            ContractBenefit.PlanName = Contract.PlanName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ContractBenefit because Contract exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ContractBenefit ON ContractBenefit FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ContractBenefit */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insContractNumber varchar(30), 
           @insLineOfBusiness varchar(30), 
           @insSeriesName varchar(30), 
           @insPlanName varchar(30), 
           @insBenefitName varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ContractBenefit  ContractPremium on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0006e959", PARENT_OWNER="", PARENT_TABLE="ContractBenefit"
    CHILD_OWNER="", CHILD_TABLE="ContractPremium"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_48", FK_COLUMNS="SeriesName""LineOfBusiness""PlanName""ContractNumber""BenefitName" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName) OR
    UPDATE(BenefitName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ContractPremium
      WHERE
        /*  %JoinFKPK(ContractPremium,deleted," = "," AND") */
        ContractPremium.ContractNumber = deleted.ContractNumber AND
        ContractPremium.LineOfBusiness = deleted.LineOfBusiness AND
        ContractPremium.SeriesName = deleted.SeriesName AND
        ContractPremium.PlanName = deleted.PlanName AND
        ContractPremium.BenefitName = deleted.BenefitName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ContractBenefit because ContractPremium exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BenefitPremiumPredictionModel  ContractBenefit on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BenefitPremiumPredictionModel"
    CHILD_OWNER="", CHILD_TABLE="ContractBenefit"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_79", FK_COLUMNS="BenefitName" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BenefitName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BenefitPremiumPredictionModel
        WHERE
          /* %JoinFKPK(inserted,BenefitPremiumPredictionModel) */
          inserted.BenefitName = BenefitPremiumPredictionModel.BenefitName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ContractBenefit because BenefitPremiumPredictionModel does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ProductPlan  ContractBenefit on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductPlan"
    CHILD_OWNER="", CHILD_TABLE="ContractBenefit"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_65", FK_COLUMNS="LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ProductPlan
        WHERE
          /* %JoinFKPK(inserted,ProductPlan) */
          inserted.LineOfBusiness = ProductPlan.LineOfBusiness and
          inserted.SeriesName = ProductPlan.SeriesName and
          inserted.PlanName = ProductPlan.PlanName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ContractBenefit because ProductPlan does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Contract  ContractBenefit on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="ContractBenefit"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Contract
        WHERE
          /* %JoinFKPK(inserted,Contract) */
          inserted.ContractNumber = Contract.ContractNumber and
          inserted.LineOfBusiness = Contract.LineOfBusiness and
          inserted.SeriesName = Contract.SeriesName and
          inserted.PlanName = Contract.PlanName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ContractBenefit because Contract does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ContractingParty ON ContractingParty FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ContractingParty */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Customer  ContractingParty on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000423c9", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="ContractingParty"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_37", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
    IF EXISTS (SELECT * FROM deleted,Customer
      WHERE
        /* %JoinFKPK(deleted,Customer," = "," AND") */
        deleted.CustFirstName = Customer.CustFirstName AND
        deleted.CustMiddleInitial = Customer.CustMiddleInitial AND
        deleted.CustSuffix = Customer.CustSuffix AND
        deleted.CustDOB = Customer.CustDOB AND
        deleted.CustLastName = Customer.CustLastName AND
        NOT EXISTS (
          SELECT * FROM ContractingParty
          WHERE
            /* %JoinFKPK(ContractingParty,Customer," = "," AND") */
            ContractingParty.CustFirstName = Customer.CustFirstName AND
            ContractingParty.CustMiddleInitial = Customer.CustMiddleInitial AND
            ContractingParty.CustSuffix = Customer.CustSuffix AND
            ContractingParty.CustDOB = Customer.CustDOB AND
            ContractingParty.CustLastName = Customer.CustLastName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ContractingParty because Customer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Contract  ContractingParty on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="ContractingParty"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_35", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (SELECT * FROM deleted,Contract
      WHERE
        /* %JoinFKPK(deleted,Contract," = "," AND") */
        deleted.ContractNumber = Contract.ContractNumber AND
        deleted.LineOfBusiness = Contract.LineOfBusiness AND
        deleted.SeriesName = Contract.SeriesName AND
        deleted.PlanName = Contract.PlanName AND
        NOT EXISTS (
          SELECT * FROM ContractingParty
          WHERE
            /* %JoinFKPK(ContractingParty,Contract," = "," AND") */
            ContractingParty.ContractNumber = Contract.ContractNumber AND
            ContractingParty.LineOfBusiness = Contract.LineOfBusiness AND
            ContractingParty.SeriesName = Contract.SeriesName AND
            ContractingParty.PlanName = Contract.PlanName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ContractingParty because Contract exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ContractingParty ON ContractingParty FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ContractingParty */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insContractNumber varchar(30), 
           @insLineOfBusiness varchar(30), 
           @insSeriesName varchar(30), 
           @insPlanName varchar(30), 
           @insCustFirstName varchar(30), 
           @insCustMiddleInitial varchar(30), 
           @insCustSuffix varchar(30), 
           @insCustDOB datetime, 
           @insCustLastName varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Customer  ContractingParty on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0003f407", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="ContractingParty"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_37", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB) OR
    UPDATE(CustLastName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Customer
        WHERE
          /* %JoinFKPK(inserted,Customer) */
          inserted.CustFirstName = Customer.CustFirstName and
          inserted.CustMiddleInitial = Customer.CustMiddleInitial and
          inserted.CustSuffix = Customer.CustSuffix and
          inserted.CustDOB = Customer.CustDOB and
          inserted.CustLastName = Customer.CustLastName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ContractingParty because Customer does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Contract  ContractingParty on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="ContractingParty"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_35", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Contract
        WHERE
          /* %JoinFKPK(inserted,Contract) */
          inserted.ContractNumber = Contract.ContractNumber and
          inserted.LineOfBusiness = Contract.LineOfBusiness and
          inserted.SeriesName = Contract.SeriesName and
          inserted.PlanName = Contract.PlanName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ContractingParty because Contract does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ContractPremium ON ContractPremium FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ContractPremium */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ContractPremium  Premium_MgmtContract on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000421b0", PARENT_OWNER="", PARENT_TABLE="ContractPremium"
    CHILD_OWNER="", CHILD_TABLE="Premium_MgmtContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_49", FK_COLUMNS="LineOfBusiness""PlanName""SeriesName""PremiumCode""ContractNumber""
              BenefitName" */
    IF EXISTS (
      SELECT * FROM deleted,Premium_MgmtContract
      WHERE
        /*  %JoinFKPK(Premium_MgmtContract,deleted," = "," AND") */
        Premium_MgmtContract.ContractNumber = deleted.ContractNumber AND
        Premium_MgmtContract.LineOfBusiness = deleted.LineOfBusiness AND
        Premium_MgmtContract.SeriesName = deleted.SeriesName AND
        Premium_MgmtContract.PlanName = deleted.PlanName AND
        Premium_MgmtContract.PremiumCode = deleted.PremiumCode AND
        Premium_MgmtContract.BenefitName = deleted.BenefitName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ContractPremium because Premium_MgmtContract exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ContractBenefit  ContractPremium on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ContractBenefit"
    CHILD_OWNER="", CHILD_TABLE="ContractPremium"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_48", FK_COLUMNS="SeriesName""PlanName""LineOfBusiness""ContractNumber""BenefitName" */
    IF EXISTS (SELECT * FROM deleted,ContractBenefit
      WHERE
        /* %JoinFKPK(deleted,ContractBenefit," = "," AND") */
        deleted.ContractNumber = ContractBenefit.ContractNumber AND
        deleted.LineOfBusiness = ContractBenefit.LineOfBusiness AND
        deleted.SeriesName = ContractBenefit.SeriesName AND
        deleted.PlanName = ContractBenefit.PlanName AND
        deleted.BenefitName = ContractBenefit.BenefitName AND
        NOT EXISTS (
          SELECT * FROM ContractPremium
          WHERE
            /* %JoinFKPK(ContractPremium,ContractBenefit," = "," AND") */
            ContractPremium.ContractNumber = ContractBenefit.ContractNumber AND
            ContractPremium.LineOfBusiness = ContractBenefit.LineOfBusiness AND
            ContractPremium.SeriesName = ContractBenefit.SeriesName AND
            ContractPremium.PlanName = ContractBenefit.PlanName AND
            ContractPremium.BenefitName = ContractBenefit.BenefitName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ContractPremium because ContractBenefit exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ContractPremium ON ContractPremium FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ContractPremium */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insContractNumber varchar(30), 
           @insLineOfBusiness varchar(30), 
           @insSeriesName varchar(30), 
           @insPlanName varchar(30), 
           @insPremiumCode varchar(30), 
           @insBenefitName varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ContractPremium  Premium_MgmtContract on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00042fec", PARENT_OWNER="", PARENT_TABLE="ContractPremium"
    CHILD_OWNER="", CHILD_TABLE="Premium_MgmtContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_49", FK_COLUMNS="LineOfBusiness""PlanName""SeriesName""PremiumCode""ContractNumber""
              BenefitName" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName) OR
    UPDATE(PremiumCode) OR
    UPDATE(BenefitName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Premium_MgmtContract
      WHERE
        /*  %JoinFKPK(Premium_MgmtContract,deleted," = "," AND") */
        Premium_MgmtContract.ContractNumber = deleted.ContractNumber AND
        Premium_MgmtContract.LineOfBusiness = deleted.LineOfBusiness AND
        Premium_MgmtContract.SeriesName = deleted.SeriesName AND
        Premium_MgmtContract.PlanName = deleted.PlanName AND
        Premium_MgmtContract.PremiumCode = deleted.PremiumCode AND
        Premium_MgmtContract.BenefitName = deleted.BenefitName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ContractPremium because Premium_MgmtContract exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ContractBenefit  ContractPremium on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ContractBenefit"
    CHILD_OWNER="", CHILD_TABLE="ContractPremium"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_48", FK_COLUMNS="LineOfBusiness""SeriesName""PlanName""ContractNumber""BenefitName" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName) OR
    UPDATE(BenefitName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ContractBenefit
        WHERE
          /* %JoinFKPK(inserted,ContractBenefit) */
          inserted.ContractNumber = ContractBenefit.ContractNumber and
          inserted.LineOfBusiness = ContractBenefit.LineOfBusiness and
          inserted.SeriesName = ContractBenefit.SeriesName and
          inserted.PlanName = ContractBenefit.PlanName and
          inserted.BenefitName = ContractBenefit.BenefitName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ContractPremium because ContractBenefit does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_CriticalInsuranceData ON CriticalInsuranceData FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CriticalInsuranceData */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Customer  CriticalInsuranceData on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00025c6a", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="CriticalInsuranceData"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_72", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
    IF EXISTS (SELECT * FROM deleted,Customer
      WHERE
        /* %JoinFKPK(deleted,Customer," = "," AND") */
        deleted.CustFirstName = Customer.CustFirstName AND
        deleted.CustMiddleInitial = Customer.CustMiddleInitial AND
        deleted.CustSuffix = Customer.CustSuffix AND
        deleted.CustDOB = Customer.CustDOB AND
        deleted.CustLastName = Customer.CustLastName AND
        NOT EXISTS (
          SELECT * FROM CriticalInsuranceData
          WHERE
            /* %JoinFKPK(CriticalInsuranceData,Customer," = "," AND") */
            CriticalInsuranceData.CustFirstName = Customer.CustFirstName AND
            CriticalInsuranceData.CustMiddleInitial = Customer.CustMiddleInitial AND
            CriticalInsuranceData.CustSuffix = Customer.CustSuffix AND
            CriticalInsuranceData.CustDOB = Customer.CustDOB AND
            CriticalInsuranceData.CustLastName = Customer.CustLastName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last CriticalInsuranceData because Customer exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_CriticalInsuranceData ON CriticalInsuranceData FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CriticalInsuranceData */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCustFirstName varchar(30), 
           @insCustMiddleInitial varchar(30), 
           @insCustSuffix varchar(30), 
           @insCustDOB datetime, 
           @insCustLastName varchar(30), 
           @insAssessmentDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Customer  CriticalInsuranceData on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00022423", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="CriticalInsuranceData"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_72", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB) OR
    UPDATE(CustLastName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Customer
        WHERE
          /* %JoinFKPK(inserted,Customer) */
          inserted.CustFirstName = Customer.CustFirstName and
          inserted.CustMiddleInitial = Customer.CustMiddleInitial and
          inserted.CustSuffix = Customer.CustSuffix and
          inserted.CustDOB = Customer.CustDOB and
          inserted.CustLastName = Customer.CustLastName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update CriticalInsuranceData because Customer does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Customer ON Customer FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Customer */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Customer  CriticalInsuranceData on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000a8850", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="CriticalInsuranceData"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_72", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
    IF EXISTS (
      SELECT * FROM deleted,CriticalInsuranceData
      WHERE
        /*  %JoinFKPK(CriticalInsuranceData,deleted," = "," AND") */
        CriticalInsuranceData.CustFirstName = deleted.CustFirstName AND
        CriticalInsuranceData.CustMiddleInitial = deleted.CustMiddleInitial AND
        CriticalInsuranceData.CustSuffix = deleted.CustSuffix AND
        CriticalInsuranceData.CustDOB = deleted.CustDOB AND
        CriticalInsuranceData.CustLastName = deleted.CustLastName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Customer because CriticalInsuranceData exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Customer  Claim on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="Claim"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_67", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
    IF EXISTS (
      SELECT * FROM deleted,Claim
      WHERE
        /*  %JoinFKPK(Claim,deleted," = "," AND") */
        Claim.CustFirstName = deleted.CustFirstName AND
        Claim.CustMiddleInitial = deleted.CustMiddleInitial AND
        Claim.CustSuffix = deleted.CustSuffix AND
        Claim.CustDOB = deleted.CustDOB AND
        Claim.CustLastName = deleted.CustLastName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Customer because Claim exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Customer  Invoice on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="Invoice"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_52", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
    IF EXISTS (
      SELECT * FROM deleted,Invoice
      WHERE
        /*  %JoinFKPK(Invoice,deleted," = "," AND") */
        Invoice.CustFirstName = deleted.CustFirstName AND
        Invoice.CustMiddleInitial = deleted.CustMiddleInitial AND
        Invoice.CustSuffix = deleted.CustSuffix AND
        Invoice.CustDOB = deleted.CustDOB AND
        Invoice.CustLastName = deleted.CustLastName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Customer because Invoice exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Customer  ContractingParty on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="ContractingParty"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_37", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
    IF EXISTS (
      SELECT * FROM deleted,ContractingParty
      WHERE
        /*  %JoinFKPK(ContractingParty,deleted," = "," AND") */
        ContractingParty.CustFirstName = deleted.CustFirstName AND
        ContractingParty.CustMiddleInitial = deleted.CustMiddleInitial AND
        ContractingParty.CustSuffix = deleted.CustSuffix AND
        ContractingParty.CustDOB = deleted.CustDOB AND
        ContractingParty.CustLastName = deleted.CustLastName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Customer because ContractingParty exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Customer  Remittance on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="Remittance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_28", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
    IF EXISTS (
      SELECT * FROM deleted,Remittance
      WHERE
        /*  %JoinFKPK(Remittance,deleted," = "," AND") */
        Remittance.CustFirstName = deleted.CustFirstName AND
        Remittance.CustMiddleInitial = deleted.CustMiddleInitial AND
        Remittance.CustSuffix = deleted.CustSuffix AND
        Remittance.CustDOB = deleted.CustDOB AND
        Remittance.CustLastName = deleted.CustLastName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Customer because Remittance exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Customer  AccountMember on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="AccountMember"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_6", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
    IF EXISTS (
      SELECT * FROM deleted,AccountMember
      WHERE
        /*  %JoinFKPK(AccountMember,deleted," = "," AND") */
        AccountMember.CustFirstName = deleted.CustFirstName AND
        AccountMember.CustMiddleInitial = deleted.CustMiddleInitial AND
        AccountMember.CustSuffix = deleted.CustSuffix AND
        AccountMember.CustDOB = deleted.CustDOB AND
        AccountMember.CustLastName = deleted.CustLastName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Customer because AccountMember exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Customer  CustomerAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="CustomerAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_1", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
    IF EXISTS (
      SELECT * FROM deleted,CustomerAddress
      WHERE
        /*  %JoinFKPK(CustomerAddress,deleted," = "," AND") */
        CustomerAddress.CustFirstName = deleted.CustFirstName AND
        CustomerAddress.CustMiddleInitial = deleted.CustMiddleInitial AND
        CustomerAddress.CustSuffix = deleted.CustSuffix AND
        CustomerAddress.CustDOB = deleted.CustDOB AND
        CustomerAddress.CustLastName = deleted.CustLastName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Customer because CustomerAddress exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Customer ON Customer FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Customer */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCustFirstName varchar(30), 
           @insCustMiddleInitial varchar(30), 
           @insCustSuffix varchar(30), 
           @insCustDOB datetime, 
           @insCustLastName varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Customer  CriticalInsuranceData on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000c46a5", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="CriticalInsuranceData"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_72", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB) OR
    UPDATE(CustLastName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,CriticalInsuranceData
      WHERE
        /*  %JoinFKPK(CriticalInsuranceData,deleted," = "," AND") */
        CriticalInsuranceData.CustFirstName = deleted.CustFirstName AND
        CriticalInsuranceData.CustMiddleInitial = deleted.CustMiddleInitial AND
        CriticalInsuranceData.CustSuffix = deleted.CustSuffix AND
        CriticalInsuranceData.CustDOB = deleted.CustDOB AND
        CriticalInsuranceData.CustLastName = deleted.CustLastName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Customer because CriticalInsuranceData exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Customer  Claim on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="Claim"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_67", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB) OR
    UPDATE(CustLastName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Claim
      WHERE
        /*  %JoinFKPK(Claim,deleted," = "," AND") */
        Claim.CustFirstName = deleted.CustFirstName AND
        Claim.CustMiddleInitial = deleted.CustMiddleInitial AND
        Claim.CustSuffix = deleted.CustSuffix AND
        Claim.CustDOB = deleted.CustDOB AND
        Claim.CustLastName = deleted.CustLastName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Customer because Claim exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Customer  Invoice on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="Invoice"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_52", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB) OR
    UPDATE(CustLastName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Invoice
      WHERE
        /*  %JoinFKPK(Invoice,deleted," = "," AND") */
        Invoice.CustFirstName = deleted.CustFirstName AND
        Invoice.CustMiddleInitial = deleted.CustMiddleInitial AND
        Invoice.CustSuffix = deleted.CustSuffix AND
        Invoice.CustDOB = deleted.CustDOB AND
        Invoice.CustLastName = deleted.CustLastName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Customer because Invoice exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Customer  ContractingParty on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="ContractingParty"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_37", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB) OR
    UPDATE(CustLastName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ContractingParty
      WHERE
        /*  %JoinFKPK(ContractingParty,deleted," = "," AND") */
        ContractingParty.CustFirstName = deleted.CustFirstName AND
        ContractingParty.CustMiddleInitial = deleted.CustMiddleInitial AND
        ContractingParty.CustSuffix = deleted.CustSuffix AND
        ContractingParty.CustDOB = deleted.CustDOB AND
        ContractingParty.CustLastName = deleted.CustLastName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Customer because ContractingParty exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Customer  Remittance on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="Remittance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_28", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB) OR
    UPDATE(CustLastName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Remittance
      WHERE
        /*  %JoinFKPK(Remittance,deleted," = "," AND") */
        Remittance.CustFirstName = deleted.CustFirstName AND
        Remittance.CustMiddleInitial = deleted.CustMiddleInitial AND
        Remittance.CustSuffix = deleted.CustSuffix AND
        Remittance.CustDOB = deleted.CustDOB AND
        Remittance.CustLastName = deleted.CustLastName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Customer because Remittance exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Customer  AccountMember on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="AccountMember"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_6", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB) OR
    UPDATE(CustLastName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,AccountMember
      WHERE
        /*  %JoinFKPK(AccountMember,deleted," = "," AND") */
        AccountMember.CustFirstName = deleted.CustFirstName AND
        AccountMember.CustMiddleInitial = deleted.CustMiddleInitial AND
        AccountMember.CustSuffix = deleted.CustSuffix AND
        AccountMember.CustDOB = deleted.CustDOB AND
        AccountMember.CustLastName = deleted.CustLastName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Customer because AccountMember exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Customer  CustomerAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="CustomerAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_1", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB) OR
    UPDATE(CustLastName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,CustomerAddress
      WHERE
        /*  %JoinFKPK(CustomerAddress,deleted," = "," AND") */
        CustomerAddress.CustFirstName = deleted.CustFirstName AND
        CustomerAddress.CustMiddleInitial = deleted.CustMiddleInitial AND
        CustomerAddress.CustSuffix = deleted.CustSuffix AND
        CustomerAddress.CustDOB = deleted.CustDOB AND
        CustomerAddress.CustLastName = deleted.CustLastName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Customer because CustomerAddress exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_CustomerAddress ON CustomerAddress FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CustomerAddress */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* StateRegions  CustomerAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00039486", PARENT_OWNER="", PARENT_TABLE="StateRegions"
    CHILD_OWNER="", CHILD_TABLE="CustomerAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_71", FK_COLUMNS="CustState" */
    IF EXISTS (SELECT * FROM deleted,StateRegions
      WHERE
        /* %JoinFKPK(deleted,StateRegions," = "," AND") */
        deleted.CustState = StateRegions.CustState AND
        NOT EXISTS (
          SELECT * FROM CustomerAddress
          WHERE
            /* %JoinFKPK(CustomerAddress,StateRegions," = "," AND") */
            CustomerAddress.CustState = StateRegions.CustState
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last CustomerAddress because StateRegions exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Customer  CustomerAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="CustomerAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_1", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
    IF EXISTS (SELECT * FROM deleted,Customer
      WHERE
        /* %JoinFKPK(deleted,Customer," = "," AND") */
        deleted.CustFirstName = Customer.CustFirstName AND
        deleted.CustMiddleInitial = Customer.CustMiddleInitial AND
        deleted.CustSuffix = Customer.CustSuffix AND
        deleted.CustDOB = Customer.CustDOB AND
        deleted.CustLastName = Customer.CustLastName AND
        NOT EXISTS (
          SELECT * FROM CustomerAddress
          WHERE
            /* %JoinFKPK(CustomerAddress,Customer," = "," AND") */
            CustomerAddress.CustFirstName = Customer.CustFirstName AND
            CustomerAddress.CustMiddleInitial = Customer.CustMiddleInitial AND
            CustomerAddress.CustSuffix = Customer.CustSuffix AND
            CustomerAddress.CustDOB = Customer.CustDOB AND
            CustomerAddress.CustLastName = Customer.CustLastName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last CustomerAddress because Customer exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_CustomerAddress ON CustomerAddress FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CustomerAddress */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCustLastName varchar(30), 
           @insCustFirstName varchar(30), 
           @insCustMiddleInitial varchar(30), 
           @insCustSuffix varchar(30), 
           @insCustDOB datetime, 
           @insCustAddress2 varchar(30), 
           @insCustAddress1 varchar(30), 
           @insCustCity varchar(30), 
           @insCustState varchar(30), 
           @insCustZip varchar(30), 
           @insAnnualStartDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* StateRegions  CustomerAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0003611b", PARENT_OWNER="", PARENT_TABLE="StateRegions"
    CHILD_OWNER="", CHILD_TABLE="CustomerAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_71", FK_COLUMNS="CustState" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CustState)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,StateRegions
        WHERE
          /* %JoinFKPK(inserted,StateRegions) */
          inserted.CustState = StateRegions.CustState
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update CustomerAddress because StateRegions does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Customer  CustomerAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="CustomerAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_1", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB) OR
    UPDATE(CustLastName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Customer
        WHERE
          /* %JoinFKPK(inserted,Customer) */
          inserted.CustFirstName = Customer.CustFirstName and
          inserted.CustMiddleInitial = Customer.CustMiddleInitial and
          inserted.CustSuffix = Customer.CustSuffix and
          inserted.CustDOB = Customer.CustDOB and
          inserted.CustLastName = Customer.CustLastName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update CustomerAddress because Customer does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_FinancialInstitution ON FinancialInstitution FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on FinancialInstitution */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* FinancialInstitution  Remittance on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000327a7", PARENT_OWNER="", PARENT_TABLE="FinancialInstitution"
    CHILD_OWNER="", CHILD_TABLE="Remittance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_27", FK_COLUMNS="FIName""FIAddress1""FIAddress2""FINCity""FINState""FINZip""FIPhone" */
    IF EXISTS (
      SELECT * FROM deleted,Remittance
      WHERE
        /*  %JoinFKPK(Remittance,deleted," = "," AND") */
        Remittance.FIName = deleted.FIName AND
        Remittance.FIAddress1 = deleted.FIAddress1 AND
        Remittance.FIAddress2 = deleted.FIAddress2 AND
        Remittance.FINCity = deleted.FINCity AND
        Remittance.FINState = deleted.FINState AND
        Remittance.FINZip = deleted.FINZip AND
        Remittance.FIPhone = deleted.FIPhone
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete FinancialInstitution because Remittance exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* FinancialInstitution  ClaimEvent on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FinancialInstitution"
    CHILD_OWNER="", CHILD_TABLE="ClaimEvent"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_20", FK_COLUMNS="FIName""FIAddress1""FIAddress2""FINCity""FINState""FINZip""FIPhone" */
    IF EXISTS (
      SELECT * FROM deleted,ClaimEvent
      WHERE
        /*  %JoinFKPK(ClaimEvent,deleted," = "," AND") */
        ClaimEvent.FIName = deleted.FIName AND
        ClaimEvent.FIAddress1 = deleted.FIAddress1 AND
        ClaimEvent.FIAddress2 = deleted.FIAddress2 AND
        ClaimEvent.FINCity = deleted.FINCity AND
        ClaimEvent.FINState = deleted.FINState AND
        ClaimEvent.FINZip = deleted.FINZip AND
        ClaimEvent.FIPhone = deleted.FIPhone
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete FinancialInstitution because ClaimEvent exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_FinancialInstitution ON FinancialInstitution FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on FinancialInstitution */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insFIName varchar(30), 
           @insFIAddress1 varchar(30), 
           @insFIAddress2 varchar(30), 
           @insFINCity varchar(30), 
           @insFINState varchar(30), 
           @insFINZip varchar(30), 
           @insFIPhone varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* FinancialInstitution  Remittance on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0003f005", PARENT_OWNER="", PARENT_TABLE="FinancialInstitution"
    CHILD_OWNER="", CHILD_TABLE="Remittance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_27", FK_COLUMNS="FIName""FIAddress1""FIAddress2""FINCity""FINState""FINZip""FIPhone" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(FIName) OR
    UPDATE(FIAddress1) OR
    UPDATE(FIAddress2) OR
    UPDATE(FINCity) OR
    UPDATE(FINState) OR
    UPDATE(FINZip) OR
    UPDATE(FIPhone)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Remittance
      WHERE
        /*  %JoinFKPK(Remittance,deleted," = "," AND") */
        Remittance.FIName = deleted.FIName AND
        Remittance.FIAddress1 = deleted.FIAddress1 AND
        Remittance.FIAddress2 = deleted.FIAddress2 AND
        Remittance.FINCity = deleted.FINCity AND
        Remittance.FINState = deleted.FINState AND
        Remittance.FINZip = deleted.FINZip AND
        Remittance.FIPhone = deleted.FIPhone
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update FinancialInstitution because Remittance exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* FinancialInstitution  ClaimEvent on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FinancialInstitution"
    CHILD_OWNER="", CHILD_TABLE="ClaimEvent"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_20", FK_COLUMNS="FIName""FIAddress1""FIAddress2""FINCity""FINState""FINZip""FIPhone" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(FIName) OR
    UPDATE(FIAddress1) OR
    UPDATE(FIAddress2) OR
    UPDATE(FINCity) OR
    UPDATE(FINState) OR
    UPDATE(FINZip) OR
    UPDATE(FIPhone)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ClaimEvent
      WHERE
        /*  %JoinFKPK(ClaimEvent,deleted," = "," AND") */
        ClaimEvent.FIName = deleted.FIName AND
        ClaimEvent.FIAddress1 = deleted.FIAddress1 AND
        ClaimEvent.FIAddress2 = deleted.FIAddress2 AND
        ClaimEvent.FINCity = deleted.FINCity AND
        ClaimEvent.FINState = deleted.FINState AND
        ClaimEvent.FINZip = deleted.FINZip AND
        ClaimEvent.FIPhone = deleted.FIPhone
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update FinancialInstitution because ClaimEvent exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Invoice ON Invoice FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Invoice */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BillingAccount  Invoice on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0006727e", PARENT_OWNER="", PARENT_TABLE="BillingAccount"
    CHILD_OWNER="", CHILD_TABLE="Invoice"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_58", FK_COLUMNS="BAcctName""BAcctName2""BillingAddress1""BillingAddress2""BillingCity""
              BillingState""BillingZip" */
    IF EXISTS (SELECT * FROM deleted,BillingAccount
      WHERE
        /* %JoinFKPK(deleted,BillingAccount," = "," AND") */
        deleted.BAcctName = BillingAccount.BAcctName AND
        deleted.BAcctName2 = BillingAccount.BAcctName2 AND
        deleted.BillingAddress1 = BillingAccount.BillingAddress1 AND
        deleted.BillingAddress2 = BillingAccount.BillingAddress2 AND
        deleted.BillingCity = BillingAccount.BillingCity AND
        deleted.BillingState = BillingAccount.BillingState AND
        deleted.BillingZip = BillingAccount.BillingZip AND
        NOT EXISTS (
          SELECT * FROM Invoice
          WHERE
            /* %JoinFKPK(Invoice,BillingAccount," = "," AND") */
            Invoice.BAcctName = BillingAccount.BAcctName AND
            Invoice.BAcctName2 = BillingAccount.BAcctName2 AND
            Invoice.BillingAddress1 = BillingAccount.BillingAddress1 AND
            Invoice.BillingAddress2 = BillingAccount.BillingAddress2 AND
            Invoice.BillingCity = BillingAccount.BillingCity AND
            Invoice.BillingState = BillingAccount.BillingState AND
            Invoice.BillingZip = BillingAccount.BillingZip
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Invoice because BillingAccount exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Contract  Invoice on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="Invoice"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_57", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (SELECT * FROM deleted,Contract
      WHERE
        /* %JoinFKPK(deleted,Contract," = "," AND") */
        deleted.ContractNumber = Contract.ContractNumber AND
        deleted.LineOfBusiness = Contract.LineOfBusiness AND
        deleted.SeriesName = Contract.SeriesName AND
        deleted.PlanName = Contract.PlanName AND
        NOT EXISTS (
          SELECT * FROM Invoice
          WHERE
            /* %JoinFKPK(Invoice,Contract," = "," AND") */
            Invoice.ContractNumber = Contract.ContractNumber AND
            Invoice.LineOfBusiness = Contract.LineOfBusiness AND
            Invoice.SeriesName = Contract.SeriesName AND
            Invoice.PlanName = Contract.PlanName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Invoice because Contract exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Customer  Invoice on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="Invoice"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_52", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
    IF EXISTS (SELECT * FROM deleted,Customer
      WHERE
        /* %JoinFKPK(deleted,Customer," = "," AND") */
        deleted.CustFirstName = Customer.CustFirstName AND
        deleted.CustMiddleInitial = Customer.CustMiddleInitial AND
        deleted.CustSuffix = Customer.CustSuffix AND
        deleted.CustDOB = Customer.CustDOB AND
        deleted.CustLastName = Customer.CustLastName AND
        NOT EXISTS (
          SELECT * FROM Invoice
          WHERE
            /* %JoinFKPK(Invoice,Customer," = "," AND") */
            Invoice.CustFirstName = Customer.CustFirstName AND
            Invoice.CustMiddleInitial = Customer.CustMiddleInitial AND
            Invoice.CustSuffix = Customer.CustSuffix AND
            Invoice.CustDOB = Customer.CustDOB AND
            Invoice.CustLastName = Customer.CustLastName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Invoice because Customer exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Invoice ON Invoice FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Invoice */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insInvoiceNumber integer, 
           @insContractNumber varchar(30), 
           @insLineOfBusiness varchar(30), 
           @insSeriesName varchar(30), 
           @insPlanName varchar(30), 
           @insBAcctName varchar(30), 
           @insBAcctName2 varchar(30), 
           @insBillingAddress1 varchar(30), 
           @insBillingAddress2 varchar(30), 
           @insBillingCity varchar(30), 
           @insBillingState varchar(30), 
           @insBillingZip varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BillingAccount  Invoice on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000690ba", PARENT_OWNER="", PARENT_TABLE="BillingAccount"
    CHILD_OWNER="", CHILD_TABLE="Invoice"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_58", FK_COLUMNS="BAcctName""BAcctName2""BillingAddress1""BillingAddress2""BillingCity""
              BillingState""BillingZip" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BAcctName) OR
    UPDATE(BAcctName2) OR
    UPDATE(BillingAddress1) OR
    UPDATE(BillingAddress2) OR
    UPDATE(BillingCity) OR
    UPDATE(BillingState) OR
    UPDATE(BillingZip)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BillingAccount
        WHERE
          /* %JoinFKPK(inserted,BillingAccount) */
          inserted.BAcctName = BillingAccount.BAcctName and
          inserted.BAcctName2 = BillingAccount.BAcctName2 and
          inserted.BillingAddress1 = BillingAccount.BillingAddress1 and
          inserted.BillingAddress2 = BillingAccount.BillingAddress2 and
          inserted.BillingCity = BillingAccount.BillingCity and
          inserted.BillingState = BillingAccount.BillingState and
          inserted.BillingZip = BillingAccount.BillingZip
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Invoice because BillingAccount does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Contract  Invoice on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="Invoice"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_57", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Contract
        WHERE
          /* %JoinFKPK(inserted,Contract) */
          inserted.ContractNumber = Contract.ContractNumber and
          inserted.LineOfBusiness = Contract.LineOfBusiness and
          inserted.SeriesName = Contract.SeriesName and
          inserted.PlanName = Contract.PlanName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Invoice because Contract does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Customer  Invoice on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="Invoice"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_52", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB) OR
    UPDATE(CustLastName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Customer
        WHERE
          /* %JoinFKPK(inserted,Customer) */
          inserted.CustFirstName = Customer.CustFirstName and
          inserted.CustMiddleInitial = Customer.CustMiddleInitial and
          inserted.CustSuffix = Customer.CustSuffix and
          inserted.CustDOB = Customer.CustDOB and
          inserted.CustLastName = Customer.CustLastName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.CustFirstName IS NULL AND
      inserted.CustMiddleInitial IS NULL AND
      inserted.CustSuffix IS NULL AND
      inserted.CustDOB IS NULL AND
      inserted.CustLastName IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Invoice because Customer does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ManagerContract ON ManagerContract FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ManagerContract */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ManagerContract  ManagerContract on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00099608", PARENT_OWNER="", PARENT_TABLE="ManagerContract"
    CHILD_OWNER="", CHILD_TABLE="ManagerContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="ParentSitCode""ParentCompanyCode""ParentWritingNumber""ContractLevel""
              ParentIssueDate" */
    IF EXISTS (
      SELECT * FROM deleted,ManagerContract
      WHERE
        /*  %JoinFKPK(ManagerContract,deleted," = "," AND") */
        ManagerContract.ParentSitCode = deleted.SitCode AND
        ManagerContract.ParentCompanyCode = deleted.CompanyCode AND
        ManagerContract.ParentWritingNumber = deleted.WritingNumber AND
        ManagerContract.ParentIssueDate = deleted.IssueDate AND
        ManagerContract.ContractLevel = deleted.ContractLevel
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ManagerContract because ManagerContract exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ManagerContract  Premium_MgmtContract on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ManagerContract"
    CHILD_OWNER="", CHILD_TABLE="Premium_MgmtContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_50", FK_COLUMNS="SitCode""CompanyCode""WritingNumber""ContractLevel""IssueDate" */
    IF EXISTS (
      SELECT * FROM deleted,Premium_MgmtContract
      WHERE
        /*  %JoinFKPK(Premium_MgmtContract,deleted," = "," AND") */
        Premium_MgmtContract.SitCode = deleted.SitCode AND
        Premium_MgmtContract.CompanyCode = deleted.CompanyCode AND
        Premium_MgmtContract.WritingNumber = deleted.WritingNumber AND
        Premium_MgmtContract.IssueDate = deleted.IssueDate AND
        Premium_MgmtContract.ContractLevel = deleted.ContractLevel
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ManagerContract because Premium_MgmtContract exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ManagerContract  Account_Associate on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ManagerContract"
    CHILD_OWNER="", CHILD_TABLE="Account_Associate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_45", FK_COLUMNS="SitCode""CompanyCode""WritingNumber""ContractLevel""IssueDate" */
    IF EXISTS (
      SELECT * FROM deleted,Account_Associate
      WHERE
        /*  %JoinFKPK(Account_Associate,deleted," = "," AND") */
        Account_Associate.SitCode = deleted.SitCode AND
        Account_Associate.CompanyCode = deleted.CompanyCode AND
        Account_Associate.WritingNumber = deleted.WritingNumber AND
        Account_Associate.IssueDate = deleted.IssueDate AND
        Account_Associate.ContractLevel = deleted.ContractLevel
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ManagerContract because Account_Associate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ManagerContract  ManagerContract on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ManagerContract"
    CHILD_OWNER="", CHILD_TABLE="ManagerContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="ParentSitCode""ParentCompanyCode""ParentWritingNumber""ContractLevel""
              ParentIssueDate" */
    IF EXISTS (SELECT * FROM deleted,ManagerContract
      WHERE
        /* %JoinFKPK(deleted,ManagerContract," = "," AND") */
        deleted.ParentSitCode = ManagerContract.SitCode AND
        deleted.ParentCompanyCode = ManagerContract.CompanyCode AND
        deleted.ParentWritingNumber = ManagerContract.WritingNumber AND
        deleted.ParentIssueDate = ManagerContract.IssueDate AND
        deleted.ContractLevel = ManagerContract.ContractLevel AND
        NOT EXISTS (
          SELECT * FROM ManagerContract
          WHERE
            /* %JoinFKPK(ManagerContract,ManagerContract," = "," AND") */
            ManagerContract.ParentSitCode = ManagerContract.SitCode AND
            ManagerContract.ParentCompanyCode = ManagerContract.CompanyCode AND
            ManagerContract.ParentWritingNumber = ManagerContract.WritingNumber AND
            ManagerContract.ParentIssueDate = ManagerContract.IssueDate AND
            ManagerContract.ContractLevel = ManagerContract.ContractLevel
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ManagerContract because ManagerContract exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Associate  ManagerContract on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Associate"
    CHILD_OWNER="", CHILD_TABLE="ManagerContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_62", FK_COLUMNS="AssocLastName""AssocFirstName""AssocMiddleInitial""AssocSuffix""
              AssocDOB" */
    IF EXISTS (SELECT * FROM deleted,Associate
      WHERE
        /* %JoinFKPK(deleted,Associate," = "," AND") */
        deleted.AssocLastName = Associate.AssocLastName AND
        deleted.AssocFirstName = Associate.AssocFirstName AND
        deleted.AssocMiddleInitial = Associate.AssocMiddleInitial AND
        deleted.AssocSuffix = Associate.AssocSuffix AND
        deleted.AssocDOB = Associate.AssocDOB AND
        NOT EXISTS (
          SELECT * FROM ManagerContract
          WHERE
            /* %JoinFKPK(ManagerContract,Associate," = "," AND") */
            ManagerContract.AssocLastName = Associate.AssocLastName AND
            ManagerContract.AssocFirstName = Associate.AssocFirstName AND
            ManagerContract.AssocMiddleInitial = Associate.AssocMiddleInitial AND
            ManagerContract.AssocSuffix = Associate.AssocSuffix AND
            ManagerContract.AssocDOB = Associate.AssocDOB
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ManagerContract because Associate exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ManagerContract ON ManagerContract FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ManagerContract */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSitCode varchar(30), 
           @insCompanyCode varchar(30), 
           @insWritingNumber integer, 
           @insIssueDate datetime, 
           @insContractLevel varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ManagerContract  ManagerContract on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000acb97", PARENT_OWNER="", PARENT_TABLE="ManagerContract"
    CHILD_OWNER="", CHILD_TABLE="ManagerContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="ParentSitCode""ParentCompanyCode""ParentWritingNumber""ContractLevel""
              ParentIssueDate" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SitCode) OR
    UPDATE(CompanyCode) OR
    UPDATE(WritingNumber) OR
    UPDATE(IssueDate) OR
    UPDATE(ContractLevel)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ManagerContract
      WHERE
        /*  %JoinFKPK(ManagerContract,deleted," = "," AND") */
        ManagerContract.ParentSitCode = deleted.SitCode AND
        ManagerContract.ParentCompanyCode = deleted.CompanyCode AND
        ManagerContract.ParentWritingNumber = deleted.WritingNumber AND
        ManagerContract.ParentIssueDate = deleted.IssueDate AND
        ManagerContract.ContractLevel = deleted.ContractLevel
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ManagerContract because ManagerContract exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ManagerContract  Premium_MgmtContract on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ManagerContract"
    CHILD_OWNER="", CHILD_TABLE="Premium_MgmtContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_50", FK_COLUMNS="SitCode""CompanyCode""WritingNumber""ContractLevel""IssueDate" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SitCode) OR
    UPDATE(CompanyCode) OR
    UPDATE(WritingNumber) OR
    UPDATE(IssueDate) OR
    UPDATE(ContractLevel)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Premium_MgmtContract
      WHERE
        /*  %JoinFKPK(Premium_MgmtContract,deleted," = "," AND") */
        Premium_MgmtContract.SitCode = deleted.SitCode AND
        Premium_MgmtContract.CompanyCode = deleted.CompanyCode AND
        Premium_MgmtContract.WritingNumber = deleted.WritingNumber AND
        Premium_MgmtContract.IssueDate = deleted.IssueDate AND
        Premium_MgmtContract.ContractLevel = deleted.ContractLevel
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ManagerContract because Premium_MgmtContract exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ManagerContract  Account_Associate on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ManagerContract"
    CHILD_OWNER="", CHILD_TABLE="Account_Associate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_45", FK_COLUMNS="SitCode""CompanyCode""WritingNumber""ContractLevel""IssueDate" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SitCode) OR
    UPDATE(CompanyCode) OR
    UPDATE(WritingNumber) OR
    UPDATE(IssueDate) OR
    UPDATE(ContractLevel)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Account_Associate
      WHERE
        /*  %JoinFKPK(Account_Associate,deleted," = "," AND") */
        Account_Associate.SitCode = deleted.SitCode AND
        Account_Associate.CompanyCode = deleted.CompanyCode AND
        Account_Associate.WritingNumber = deleted.WritingNumber AND
        Account_Associate.IssueDate = deleted.IssueDate AND
        Account_Associate.ContractLevel = deleted.ContractLevel
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ManagerContract because Account_Associate exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ManagerContract  ManagerContract on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ManagerContract"
    CHILD_OWNER="", CHILD_TABLE="ManagerContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="ParentSitCode""ParentCompanyCode""ParentWritingNumber""ContractLevel""
              ParentIssueDate" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ParentSitCode) OR
    UPDATE(ParentCompanyCode) OR
    UPDATE(ParentWritingNumber) OR
    UPDATE(ParentIssueDate) OR
    UPDATE(ContractLevel)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ManagerContract
        WHERE
          /* %JoinFKPK(inserted,ManagerContract) */
          inserted.ParentSitCode = ManagerContract.SitCode and
          inserted.ParentCompanyCode = ManagerContract.CompanyCode and
          inserted.ParentWritingNumber = ManagerContract.WritingNumber and
          inserted.ParentIssueDate = ManagerContract.IssueDate and
          inserted.ContractLevel = ManagerContract.ContractLevel
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ParentSitCode IS NULL AND
      inserted.ParentCompanyCode IS NULL AND
      inserted.ParentWritingNumber IS NULL AND
      inserted.ParentIssueDate IS NULL AND
      inserted.ContractLevel IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ManagerContract because ManagerContract does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Associate  ManagerContract on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Associate"
    CHILD_OWNER="", CHILD_TABLE="ManagerContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_62", FK_COLUMNS="AssocLastName""AssocFirstName""AssocMiddleInitial""AssocSuffix""
              AssocDOB" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AssocLastName) OR
    UPDATE(AssocFirstName) OR
    UPDATE(AssocMiddleInitial) OR
    UPDATE(AssocSuffix) OR
    UPDATE(AssocDOB)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Associate
        WHERE
          /* %JoinFKPK(inserted,Associate) */
          inserted.AssocLastName = Associate.AssocLastName and
          inserted.AssocFirstName = Associate.AssocFirstName and
          inserted.AssocMiddleInitial = Associate.AssocMiddleInitial and
          inserted.AssocSuffix = Associate.AssocSuffix and
          inserted.AssocDOB = Associate.AssocDOB
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.AssocLastName IS NULL AND
      inserted.AssocFirstName IS NULL AND
      inserted.AssocMiddleInitial IS NULL AND
      inserted.AssocSuffix IS NULL AND
      inserted.AssocDOB IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ManagerContract because Associate does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Premium_MgmtContract ON Premium_MgmtContract FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Premium_MgmtContract */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ManagerContract  Premium_MgmtContract on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00052da0", PARENT_OWNER="", PARENT_TABLE="ManagerContract"
    CHILD_OWNER="", CHILD_TABLE="Premium_MgmtContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_50", FK_COLUMNS="SitCode""CompanyCode""WritingNumber""ContractLevel""IssueDate" */
    IF EXISTS (SELECT * FROM deleted,ManagerContract
      WHERE
        /* %JoinFKPK(deleted,ManagerContract," = "," AND") */
        deleted.SitCode = ManagerContract.SitCode AND
        deleted.CompanyCode = ManagerContract.CompanyCode AND
        deleted.WritingNumber = ManagerContract.WritingNumber AND
        deleted.IssueDate = ManagerContract.IssueDate AND
        deleted.ContractLevel = ManagerContract.ContractLevel AND
        NOT EXISTS (
          SELECT * FROM Premium_MgmtContract
          WHERE
            /* %JoinFKPK(Premium_MgmtContract,ManagerContract," = "," AND") */
            Premium_MgmtContract.SitCode = ManagerContract.SitCode AND
            Premium_MgmtContract.CompanyCode = ManagerContract.CompanyCode AND
            Premium_MgmtContract.WritingNumber = ManagerContract.WritingNumber AND
            Premium_MgmtContract.IssueDate = ManagerContract.IssueDate AND
            Premium_MgmtContract.ContractLevel = ManagerContract.ContractLevel
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Premium_MgmtContract because ManagerContract exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ContractPremium  Premium_MgmtContract on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ContractPremium"
    CHILD_OWNER="", CHILD_TABLE="Premium_MgmtContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_49", FK_COLUMNS="SeriesName""LineOfBusiness""PlanName""PremiumCode""ContractNumber""
              BenefitName" */
    IF EXISTS (SELECT * FROM deleted,ContractPremium
      WHERE
        /* %JoinFKPK(deleted,ContractPremium," = "," AND") */
        deleted.ContractNumber = ContractPremium.ContractNumber AND
        deleted.LineOfBusiness = ContractPremium.LineOfBusiness AND
        deleted.SeriesName = ContractPremium.SeriesName AND
        deleted.PlanName = ContractPremium.PlanName AND
        deleted.PremiumCode = ContractPremium.PremiumCode AND
        deleted.BenefitName = ContractPremium.BenefitName AND
        NOT EXISTS (
          SELECT * FROM Premium_MgmtContract
          WHERE
            /* %JoinFKPK(Premium_MgmtContract,ContractPremium," = "," AND") */
            Premium_MgmtContract.ContractNumber = ContractPremium.ContractNumber AND
            Premium_MgmtContract.LineOfBusiness = ContractPremium.LineOfBusiness AND
            Premium_MgmtContract.SeriesName = ContractPremium.SeriesName AND
            Premium_MgmtContract.PlanName = ContractPremium.PlanName AND
            Premium_MgmtContract.PremiumCode = ContractPremium.PremiumCode AND
            Premium_MgmtContract.BenefitName = ContractPremium.BenefitName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Premium_MgmtContract because ContractPremium exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Premium_MgmtContract ON Premium_MgmtContract FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Premium_MgmtContract */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insContractNumber varchar(30), 
           @insLineOfBusiness varchar(30), 
           @insSeriesName varchar(30), 
           @insPlanName varchar(30), 
           @insPremiumCode varchar(30), 
           @insSitCode varchar(30), 
           @insCompanyCode varchar(30), 
           @insWritingNumber integer, 
           @insContractLevel varchar(30), 
           @insIssueDate datetime, 
           @insBenefitName varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ManagerContract  Premium_MgmtContract on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00046bf3", PARENT_OWNER="", PARENT_TABLE="ManagerContract"
    CHILD_OWNER="", CHILD_TABLE="Premium_MgmtContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_50", FK_COLUMNS="SitCode""CompanyCode""WritingNumber""ContractLevel""IssueDate" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SitCode) OR
    UPDATE(CompanyCode) OR
    UPDATE(WritingNumber) OR
    UPDATE(IssueDate) OR
    UPDATE(ContractLevel)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ManagerContract
        WHERE
          /* %JoinFKPK(inserted,ManagerContract) */
          inserted.SitCode = ManagerContract.SitCode and
          inserted.CompanyCode = ManagerContract.CompanyCode and
          inserted.WritingNumber = ManagerContract.WritingNumber and
          inserted.IssueDate = ManagerContract.IssueDate and
          inserted.ContractLevel = ManagerContract.ContractLevel
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Premium_MgmtContract because ManagerContract does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ContractPremium  Premium_MgmtContract on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ContractPremium"
    CHILD_OWNER="", CHILD_TABLE="Premium_MgmtContract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_49", FK_COLUMNS="SeriesName""LineOfBusiness""PlanName""PremiumCode""ContractNumber""
              BenefitName" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName) OR
    UPDATE(PremiumCode) OR
    UPDATE(BenefitName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ContractPremium
        WHERE
          /* %JoinFKPK(inserted,ContractPremium) */
          inserted.ContractNumber = ContractPremium.ContractNumber and
          inserted.LineOfBusiness = ContractPremium.LineOfBusiness and
          inserted.SeriesName = ContractPremium.SeriesName and
          inserted.PlanName = ContractPremium.PlanName and
          inserted.PremiumCode = ContractPremium.PremiumCode and
          inserted.BenefitName = ContractPremium.BenefitName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Premium_MgmtContract because ContractPremium does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ProductPlan ON ProductPlan FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductPlan */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ProductPlan  Contract on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003e82f", PARENT_OWNER="", PARENT_TABLE="ProductPlan"
    CHILD_OWNER="", CHILD_TABLE="Contract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_66", FK_COLUMNS="LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (
      SELECT * FROM deleted,Contract
      WHERE
        /*  %JoinFKPK(Contract,deleted," = "," AND") */
        Contract.LineOfBusiness = deleted.LineOfBusiness AND
        Contract.SeriesName = deleted.SeriesName AND
        Contract.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ProductPlan because Contract exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ProductPlan  ContractBenefit on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductPlan"
    CHILD_OWNER="", CHILD_TABLE="ContractBenefit"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_65", FK_COLUMNS="LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (
      SELECT * FROM deleted,ContractBenefit
      WHERE
        /*  %JoinFKPK(ContractBenefit,deleted," = "," AND") */
        ContractBenefit.LineOfBusiness = deleted.LineOfBusiness AND
        ContractBenefit.SeriesName = deleted.SeriesName AND
        ContractBenefit.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ProductPlan because ContractBenefit exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ProductPlan  Account_ProductPlan on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductPlan"
    CHILD_OWNER="", CHILD_TABLE="Account_ProductPlan"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_64", FK_COLUMNS="LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (
      SELECT * FROM deleted,Account_ProductPlan
      WHERE
        /*  %JoinFKPK(Account_ProductPlan,deleted," = "," AND") */
        Account_ProductPlan.LineOfBusiness = deleted.LineOfBusiness AND
        Account_ProductPlan.SeriesName = deleted.SeriesName AND
        Account_ProductPlan.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ProductPlan because Account_ProductPlan exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ProductPlan ON ProductPlan FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductPlan */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insLineOfBusiness varchar(30), 
           @insSeriesName varchar(30), 
           @insPlanName varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ProductPlan  Contract on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000466fb", PARENT_OWNER="", PARENT_TABLE="ProductPlan"
    CHILD_OWNER="", CHILD_TABLE="Contract"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_66", FK_COLUMNS="LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Contract
      WHERE
        /*  %JoinFKPK(Contract,deleted," = "," AND") */
        Contract.LineOfBusiness = deleted.LineOfBusiness AND
        Contract.SeriesName = deleted.SeriesName AND
        Contract.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ProductPlan because Contract exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ProductPlan  ContractBenefit on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductPlan"
    CHILD_OWNER="", CHILD_TABLE="ContractBenefit"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_65", FK_COLUMNS="LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ContractBenefit
      WHERE
        /*  %JoinFKPK(ContractBenefit,deleted," = "," AND") */
        ContractBenefit.LineOfBusiness = deleted.LineOfBusiness AND
        ContractBenefit.SeriesName = deleted.SeriesName AND
        ContractBenefit.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ProductPlan because ContractBenefit exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ProductPlan  Account_ProductPlan on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductPlan"
    CHILD_OWNER="", CHILD_TABLE="Account_ProductPlan"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_64", FK_COLUMNS="LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Account_ProductPlan
      WHERE
        /*  %JoinFKPK(Account_ProductPlan,deleted," = "," AND") */
        Account_ProductPlan.LineOfBusiness = deleted.LineOfBusiness AND
        Account_ProductPlan.SeriesName = deleted.SeriesName AND
        Account_ProductPlan.PlanName = deleted.PlanName
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ProductPlan because Account_ProductPlan exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Remittance ON Remittance FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Remittance */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Contract  Remittance on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00069249", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="Remittance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
    IF EXISTS (SELECT * FROM deleted,Contract
      WHERE
        /* %JoinFKPK(deleted,Contract," = "," AND") */
        deleted.ContractNumber = Contract.ContractNumber AND
        deleted.LineOfBusiness = Contract.LineOfBusiness AND
        deleted.SeriesName = Contract.SeriesName AND
        deleted.PlanName = Contract.PlanName AND
        NOT EXISTS (
          SELECT * FROM Remittance
          WHERE
            /* %JoinFKPK(Remittance,Contract," = "," AND") */
            Remittance.ContractNumber = Contract.ContractNumber AND
            Remittance.LineOfBusiness = Contract.LineOfBusiness AND
            Remittance.SeriesName = Contract.SeriesName AND
            Remittance.PlanName = Contract.PlanName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Remittance because Contract exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Customer  Remittance on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="Remittance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_28", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
    IF EXISTS (SELECT * FROM deleted,Customer
      WHERE
        /* %JoinFKPK(deleted,Customer," = "," AND") */
        deleted.CustFirstName = Customer.CustFirstName AND
        deleted.CustMiddleInitial = Customer.CustMiddleInitial AND
        deleted.CustSuffix = Customer.CustSuffix AND
        deleted.CustDOB = Customer.CustDOB AND
        deleted.CustLastName = Customer.CustLastName AND
        NOT EXISTS (
          SELECT * FROM Remittance
          WHERE
            /* %JoinFKPK(Remittance,Customer," = "," AND") */
            Remittance.CustFirstName = Customer.CustFirstName AND
            Remittance.CustMiddleInitial = Customer.CustMiddleInitial AND
            Remittance.CustSuffix = Customer.CustSuffix AND
            Remittance.CustDOB = Customer.CustDOB AND
            Remittance.CustLastName = Customer.CustLastName
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Remittance because Customer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* FinancialInstitution  Remittance on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FinancialInstitution"
    CHILD_OWNER="", CHILD_TABLE="Remittance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_27", FK_COLUMNS="FIName""FIAddress1""FIAddress2""FINCity""FINState""FINZip""FIPhone" */
    IF EXISTS (SELECT * FROM deleted,FinancialInstitution
      WHERE
        /* %JoinFKPK(deleted,FinancialInstitution," = "," AND") */
        deleted.FIName = FinancialInstitution.FIName AND
        deleted.FIAddress1 = FinancialInstitution.FIAddress1 AND
        deleted.FIAddress2 = FinancialInstitution.FIAddress2 AND
        deleted.FINCity = FinancialInstitution.FINCity AND
        deleted.FINState = FinancialInstitution.FINState AND
        deleted.FINZip = FinancialInstitution.FINZip AND
        deleted.FIPhone = FinancialInstitution.FIPhone AND
        NOT EXISTS (
          SELECT * FROM Remittance
          WHERE
            /* %JoinFKPK(Remittance,FinancialInstitution," = "," AND") */
            Remittance.FIName = FinancialInstitution.FIName AND
            Remittance.FIAddress1 = FinancialInstitution.FIAddress1 AND
            Remittance.FIAddress2 = FinancialInstitution.FIAddress2 AND
            Remittance.FINCity = FinancialInstitution.FINCity AND
            Remittance.FINState = FinancialInstitution.FINState AND
            Remittance.FINZip = FinancialInstitution.FINZip AND
            Remittance.FIPhone = FinancialInstitution.FIPhone
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Remittance because FinancialInstitution exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Remittance ON Remittance FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Remittance */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insFIName varchar(30), 
           @insFIAddress1 varchar(30), 
           @insFIAddress2 varchar(30), 
           @insFINCity varchar(30), 
           @insFINState varchar(30), 
           @insFINZip varchar(30), 
           @insFIPhone varchar(30), 
           @insContractNumber varchar(30), 
           @insLineOfBusiness varchar(30), 
           @insSeriesName varchar(30), 
           @insPlanName varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Contract  Remittance on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00066809", PARENT_OWNER="", PARENT_TABLE="Contract"
    CHILD_OWNER="", CHILD_TABLE="Remittance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="ContractNumber""LineOfBusiness""SeriesName""PlanName" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ContractNumber) OR
    UPDATE(LineOfBusiness) OR
    UPDATE(SeriesName) OR
    UPDATE(PlanName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Contract
        WHERE
          /* %JoinFKPK(inserted,Contract) */
          inserted.ContractNumber = Contract.ContractNumber and
          inserted.LineOfBusiness = Contract.LineOfBusiness and
          inserted.SeriesName = Contract.SeriesName and
          inserted.PlanName = Contract.PlanName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Remittance because Contract does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Customer  Remittance on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="Remittance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_28", FK_COLUMNS="CustLastName""CustFirstName""CustMiddleInitial""CustSuffix""CustDOB" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CustFirstName) OR
    UPDATE(CustMiddleInitial) OR
    UPDATE(CustSuffix) OR
    UPDATE(CustDOB) OR
    UPDATE(CustLastName)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Customer
        WHERE
          /* %JoinFKPK(inserted,Customer) */
          inserted.CustFirstName = Customer.CustFirstName and
          inserted.CustMiddleInitial = Customer.CustMiddleInitial and
          inserted.CustSuffix = Customer.CustSuffix and
          inserted.CustDOB = Customer.CustDOB and
          inserted.CustLastName = Customer.CustLastName
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.CustFirstName IS NULL AND
      inserted.CustMiddleInitial IS NULL AND
      inserted.CustSuffix IS NULL AND
      inserted.CustDOB IS NULL AND
      inserted.CustLastName IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Remittance because Customer does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* FinancialInstitution  Remittance on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="FinancialInstitution"
    CHILD_OWNER="", CHILD_TABLE="Remittance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_27", FK_COLUMNS="FIName""FIAddress1""FIAddress2""FINCity""FINState""FINZip""FIPhone" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(FIName) OR
    UPDATE(FIAddress1) OR
    UPDATE(FIAddress2) OR
    UPDATE(FINCity) OR
    UPDATE(FINState) OR
    UPDATE(FINZip) OR
    UPDATE(FIPhone)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,FinancialInstitution
        WHERE
          /* %JoinFKPK(inserted,FinancialInstitution) */
          inserted.FIName = FinancialInstitution.FIName and
          inserted.FIAddress1 = FinancialInstitution.FIAddress1 and
          inserted.FIAddress2 = FinancialInstitution.FIAddress2 and
          inserted.FINCity = FinancialInstitution.FINCity and
          inserted.FINState = FinancialInstitution.FINState and
          inserted.FINZip = FinancialInstitution.FINZip and
          inserted.FIPhone = FinancialInstitution.FIPhone
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Remittance because FinancialInstitution does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_StateRegions ON StateRegions FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on StateRegions */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* StateRegions  CustomerAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00012308", PARENT_OWNER="", PARENT_TABLE="StateRegions"
    CHILD_OWNER="", CHILD_TABLE="CustomerAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_71", FK_COLUMNS="CustState" */
    IF EXISTS (
      SELECT * FROM deleted,CustomerAddress
      WHERE
        /*  %JoinFKPK(CustomerAddress,deleted," = "," AND") */
        CustomerAddress.CustState = deleted.CustState
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete StateRegions because CustomerAddress exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_StateRegions ON StateRegions FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on StateRegions */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCustState varchar(30),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* StateRegions  CustomerAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00013e3a", PARENT_OWNER="", PARENT_TABLE="StateRegions"
    CHILD_OWNER="", CHILD_TABLE="CustomerAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_71", FK_COLUMNS="CustState" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CustState)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,CustomerAddress
      WHERE
        /*  %JoinFKPK(CustomerAddress,deleted," = "," AND") */
        CustomerAddress.CustState = deleted.CustState
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update StateRegions because CustomerAddress exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


